{
  "version": 3,
  "sources": ["../prefab/node_modules/@wonderlandengine/api/dist/property.js", "../prefab/node_modules/@wonderlandengine/api/dist/decorators.js", "../prefab/node_modules/@wonderlandengine/api/dist/utils/event.js", "../prefab/node_modules/@wonderlandengine/api/dist/resources/resource.js", "../prefab/node_modules/@wonderlandengine/api/dist/utils/misc.js", "../prefab/node_modules/@wonderlandengine/api/dist/wonderland.js", "../prefab/node_modules/@wonderlandengine/api/dist/resources/material-manager.js", "../prefab/node_modules/@wonderlandengine/api/dist/utils/logger.js", "../prefab/node_modules/@wonderlandengine/api/dist/wasm.js", "../prefab/node_modules/gl-matrix/esm/common.js", "../prefab/node_modules/gl-matrix/esm/vec3.js", "../prefab/js/components/random-mesh.js", "../prefab/js/components/rotate-y.js", "../prefab/js/instance-index.js"],
  "sourcesContent": ["/**\n * Component property type.\n */\nexport var Type;\n(function (Type) {\n    /**\n     * **Native**\n     *\n     * Property of a native component. Must not be used in custom components.\n     *\n     * @hidden\n     */\n    Type[Type[\"Native\"] = 0] = \"Native\";\n    /**\n     * **Bool**:\n     *\n     * Appears in the editor as a checkbox.\n     *\n     * Initial value is `false`, unless overridden by the `default` property.\n     */\n    Type[Type[\"Bool\"] = 1] = \"Bool\";\n    /**\n     * **Int**:\n     *\n     * Appears in the editor as an integer input field.\n     *\n     * Initial value is `0`, unless overridden by the `default` property.\n     */\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    /**\n     * **Float**:\n     *\n     * Appears in the editor as a floating point input field.\n     *\n     * Initial value is `0.0`, unless overridden by the `default` property.\n     */\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    /**\n     * **String / Text**:\n     *\n     * Appears in the editor as a single-line text input field.\n     *\n     * Initial value is an empty string, unless overridden by the `default`\n     * property.\n     */\n    Type[Type[\"String\"] = 4] = \"String\";\n    /**\n     * **Enumeration**:\n     *\n     * Appears in the editor as a dropdown with given values. The additional\n     * `values` parameter with selection options is mandatory.\n     *\n     * The property value is resolved to an **index** into the `values` array.\n     *\n     * Initial value is the first element in `values`, unless overridden by\n     * the `default` property. The `default` value can be a string or an index\n     * into `values`.\n     *\n     * @example\n     *\n     * ```js\n     *     camera: {type: Type.Enum, values: ['auto', 'back', 'front'], default: 'auto'},\n     * ```\n     */\n    Type[Type[\"Enum\"] = 5] = \"Enum\";\n    /**\n     * **Object reference**:\n     *\n     * Appears in the editor as an object resource selection dropdown\n     * with object picker.\n     *\n     * Initial value is `null`.\n     */\n    Type[Type[\"Object\"] = 6] = \"Object\";\n    /**\n     * **Mesh reference**:\n     *\n     * Appears in the editor as a mesh resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Type[Type[\"Mesh\"] = 7] = \"Mesh\";\n    /**\n     * **Texture reference**:\n     *\n     * Appears in the editor as a texture resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Type[Type[\"Texture\"] = 8] = \"Texture\";\n    /**\n     * **Material reference**:\n     *\n     * Appears in the editor as a material resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Type[Type[\"Material\"] = 9] = \"Material\";\n    /**\n     * **Animation reference**:\n     *\n     * Appears in the editor as an animation resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Type[Type[\"Animation\"] = 10] = \"Animation\";\n    /**\n     * **Skin reference**:\n     *\n     * Appears in the editor as a skin resource selection dropdown.\n     *\n     * Initial value is `null`.\n     */\n    Type[Type[\"Skin\"] = 11] = \"Skin\";\n    /**\n     * **Color**:\n     *\n     * Appears in the editor as a color widget.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 1.0]`, unless overridden by the\n     * `default` property.\n     */\n    Type[Type[\"Color\"] = 12] = \"Color\";\n    /**\n     * **Vector of two floats**:\n     *\n     * Appears in the editor as a two-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Type[Type[\"Vector2\"] = 13] = \"Vector2\";\n    /**\n     * **Vector of three floats**:\n     *\n     * Appears in the editor as a three-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Type[Type[\"Vector3\"] = 14] = \"Vector3\";\n    /**\n     * **Vector of four floats**:\n     *\n     * Appears in the editor as a four-element floating point input field.\n     *\n     * Initial value is `[0.0, 0.0, 0.0, 0.0]`, unless overridden by the\n     * `default` property.\n     */\n    Type[Type[\"Vector4\"] = 15] = \"Vector4\";\n})(Type || (Type = {}));\n/**\n * Default cloner implementation.\n *\n * Clones array-like properties and leaves all other types unchanged.\n */\nexport class DefaultPropertyCloner {\n    clone(type, value) {\n        switch (type) {\n            case Type.Color:\n            case Type.Vector2:\n            case Type.Vector3:\n            case Type.Vector4:\n                return value.slice();\n            default:\n                return value;\n        }\n    }\n}\n/** Default cloner for property values. */\nexport const defaultPropertyCloner = new DefaultPropertyCloner();\n/**\n * Component property namespace.\n *\n * Usage:\n *\n * ```js\n * import {Component, Property} from '@wonderlandengine/api';\n *\n * class MyComponent extends Component {\n *     static Properties = {\n *         myBool: Property.bool(true),\n *         myInt: Property.int(42),\n *         myString: Property.string('Hello World!'),\n *         myMesh: Property.mesh(),\n *     }\n * }\n * ```\n *\n * For TypeScript users, you can use the decorators instead.\n */\nexport const Property = {\n    /**\n     * Create an boolean property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `false`.\n     */\n    bool(defaultValue = false) {\n        return { type: Type.Bool, default: defaultValue };\n    },\n    /**\n     * Create an integer property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `0`.\n     */\n    int(defaultValue = 0) {\n        return { type: Type.Int, default: defaultValue };\n    },\n    /**\n     * Create an float property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `0.0`.\n     */\n    float(defaultValue = 0.0) {\n        return { type: Type.Float, default: defaultValue };\n    },\n    /**\n     * Create an string property.\n     *\n     * @param defaultValue The default value. If not provided, defaults to `''`.\n     */\n    string(defaultValue = '') {\n        return { type: Type.String, default: defaultValue };\n    },\n    /**\n     * Create an enumeration property.\n     *\n     * @param values The list of values.\n     * @param defaultValue The default value. Can be a string or an index into\n     *     `values`. If not provided, defaults to the first element.\n     */\n    enum(values, defaultValue) {\n        return { type: Type.Enum, values, default: defaultValue };\n    },\n    /** Create an {@link Object3D} reference property. */\n    object(opts) {\n        return { type: Type.Object, default: null, required: opts?.required ?? false };\n    },\n    /** Create a {@link Mesh} reference property. */\n    mesh(opts) {\n        return { type: Type.Mesh, default: null, required: opts?.required ?? false };\n    },\n    /** Create a {@link Texture} reference property. */\n    texture(opts) {\n        return { type: Type.Texture, default: null, required: opts?.required ?? false };\n    },\n    /** Create a {@link Material} reference property. */\n    material(opts) {\n        return { type: Type.Material, default: null, required: opts?.required ?? false };\n    },\n    /** Create an {@link Animation} reference property. */\n    animation(opts) {\n        return { type: Type.Animation, default: null, required: opts?.required ?? false };\n    },\n    /** Create a {@link Skin} reference property. */\n    skin(opts) {\n        return { type: Type.Skin, default: null, required: opts?.required ?? false };\n    },\n    /**\n     * Create a color property.\n     *\n     * @param r The red component, in the range [0; 1].\n     * @param g The green component, in the range [0; 1].\n     * @param b The blue component, in the range [0; 1].\n     * @param a The alpha component, in the range [0; 1].\n     */\n    color(r = 0.0, g = 0.0, b = 0.0, a = 1.0) {\n        return { type: Type.Color, default: [r, g, b, a] };\n    },\n    /**\n     * Create a two-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     */\n    vector2(x = 0.0, y = 0.0) {\n        return { type: Type.Vector2, default: [x, y] };\n    },\n    /**\n     * Create a three-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    vector3(x = 0.0, y = 0.0, z = 0.0) {\n        return { type: Type.Vector3, default: [x, y, z] };\n    },\n    /**\n     * Create a four-element vector property.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param w The w component.\n     */\n    vector4(x = 0.0, y = 0.0, z = 0.0, w = 0.0) {\n        return { type: Type.Vector4, default: [x, y, z, w] };\n    },\n};\n", "import { Property, Type } from './property.js';\n/**\n * Decorator for JS component properties.\n *\n * @param data The property description as an object literal\n * @returns A decorator function modifying the `Properties` static\n *     attribute\n */\nfunction propertyDecorator(data) {\n    return function (target, propertyKey) {\n        const ctor = target.constructor;\n        ctor.Properties = ctor.hasOwnProperty('Properties') ? ctor.Properties : {};\n        ctor.Properties[propertyKey] = data;\n    };\n}\n/**\n * Decorator for making a getter enumerable.\n *\n * Usage:\n *\n * ```ts\n * class MyClass {\n *     @enumerable()\n *     get projectionMatrix(): Float32Array { ... }\n * }\n * ```\n */\nexport function enumerable() {\n    return function (_, __, descriptor) {\n        descriptor.enumerable = true;\n    };\n}\n/**\n * Decorator for native properties.\n *\n * Usage:\n *\n * ```ts\n * class MyClass {\n *     @nativeProperty()\n *     get projectionMatrix(): Float32Array { ... }\n * }\n * ```\n */\nexport function nativeProperty() {\n    return function (target, propertyKey, descriptor) {\n        enumerable()(target, propertyKey, descriptor);\n        propertyDecorator({ type: Type.Native })(target, propertyKey);\n    };\n}\n/**\n * Property decorators namespace.\n *\n * You can use the decorators to mark a class attribute as\n * a Wonderland Engine property.\n *\n * Usage:\n *\n * ```ts\n * import {Mesh} from '@wonderlandengine/api';\n * import {property} from '@wonderlandengine/api/decorators.js';\n *\n * class MyComponent extends Component {\n *     @property.bool(true)\n *     myBool!: boolean;\n *\n *     @property.int(42)\n *     myInt!: number;\n *\n *     @property.string('Hello World!')\n *     myString!: string;\n *\n *     @property.mesh()\n *     myMesh!: Mesh;\n * }\n * ```\n *\n * For JavaScript users, please declare the properties statically.\n */\nexport const property = {};\nfor (const name in Property) {\n    /* Assign each property functor to a TypeScript decorator.\n     * This code extracts parameters and return type to provide proper\n     * typings to the user. */\n    property[name] = (...args) => {\n        const functor = Property[name];\n        return propertyDecorator(functor(...args));\n    };\n}\n", "/** Internal type for transaction. */\nvar TransactionType;\n(function (TransactionType) {\n    TransactionType[TransactionType[\"Addition\"] = 1] = \"Addition\";\n    TransactionType[TransactionType[\"Removal\"] = 2] = \"Removal\";\n})(TransactionType || (TransactionType = {}));\n/**\n * Event emitter.\n *\n * This class allows to register listeners that will get notified by the emitter.\n *\n * Usage example:\n *\n * ```js\n * // `onPreRender` is an `Emitter` instance.\n * scene.onPreRender.add(() => console.log('before rendering'));\n * // `onPostRender` is an `Emitter` instance.\n * scene.onPostRender.add(() => console.log('after rendering'));\n * ```\n *\n * You can create your own emitters:\n *\n * ```js\n * import {Emitter} from '@wonderlandengine/api';\n *\n * const emitter = new Emitter();\n * ```\n *\n * You can notify listeners in to your emitter using {@link Emitter.notify}:\n *\n * ```js\n * // Notifies all the listeners.\n * emitter.notify();\n * // Notifies all the listeners with some data.\n * emitter.notify({ myInt: 42, myStr: 'Hello World!' });\n * ```\n *\n * @category event\n */\nexport class Emitter {\n    /**\n     * List of listeners to trigger when `notify` is called.\n     *\n     * @hidden\n     */\n    _listeners = [];\n    /**\n     * `true` if the emitter is currently notifying listeners. This\n     * is used to defer addition and removal.\n     *\n     * @hidden\n     */\n    _notifying = false;\n    /**\n     * Pending additions / removals, performed during a notification.\n     *\n     * @hidden\n     */\n    _transactions = [];\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Basic usage:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * });\n     * ```\n     *\n     * Automatically remove the listener when an event is received:\n     *\n     * ```js\n     * emitter.add((data) => {\n     *     console.log('event received!');\n     *     console.log(data);\n     * }, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     * @param opts The listener options. For more information, please have a look\n     *     at the {@link ListenerOptions} interface.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    add(listener, opts = {}) {\n        const { once = false, id = undefined } = opts;\n        const data = { id, once, callback: listener };\n        if (this._notifying) {\n            this._transactions.push({ type: TransactionType.Addition, data });\n            return this;\n        }\n        this._listeners.push(data);\n        return this;\n    }\n    /**\n     * Equivalent to {@link Emitter.add}.\n     *\n     * @param listeners The callback(s) to register.\n     * @returns Reference to self (for method chaining).\n     *\n     * @deprecated Please use {@link Emitter.add} instead.\n     */\n    push(...listeners) {\n        for (const cb of listeners)\n            this.add(cb);\n        return this;\n    }\n    /**\n     * Register a new listener to be triggered on {@link Emitter.notify}.\n     *\n     * Once notified, the listener will be automatically removed.\n     *\n     * The method is equivalent to calling {@link Emitter.add} with:\n     *\n     * ```js\n     * emitter.add(listener, {once: true});\n     * ```\n     *\n     * @param listener The callback to register.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener) {\n        return this.add(listener, { once: true });\n    }\n    /**\n     * Remove a registered listener.\n     *\n     * Usage with a callback:\n     *\n     * ```js\n     * const listener = (data) => console.log(data);\n     * emitter.add(listener);\n     *\n     * // Remove using the callback reference:\n     * emitter.remove(listener);\n     * ```\n     *\n     * Usage with an id:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'my-callback'});\n     *\n     * // Remove using the id:\n     * emitter.remove('my-callback');\n     * ```\n     *\n     * Using identifiers, you will need to ensure your value is unique to avoid\n     * removing listeners from other libraries, e.g.,:\n     *\n     * ```js\n     * emitter.add((data) => console.log(data), {id: 'non-unique'});\n     * // This second listener could be added by a third-party library.\n     * emitter.add((data) => console.log('Hello From Library!'), {id: 'non-unique'});\n     *\n     * // Ho Snap! This also removed the library listener!\n     * emitter.remove('non-unique');\n     * ```\n     *\n     * The identifier can be any type. However, remember that the comparison will be\n     * by-value for primitive types (string, number), but by reference for objects.\n     *\n     * Example:\n     *\n     * ```js\n     * emitter.add(() => console.log('Hello'), {id: {value: 42}});\n     * emitter.add(() => console.log('World!'), {id: {value: 42}});\n     * emitter.remove({value: 42}); // None of the above listeners match!\n     * emitter.notify(); // Prints 'Hello' and 'World!'.\n     * ```\n     *\n     * Here, both emitters have id `{value: 42}`, but the comparison is made by reference. Thus,\n     * the `remove()` call has no effect. We can make it work by doing:\n     *\n     * ```js\n     * const id = {value: 42};\n     * emitter.add(() => console.log('Hello'), {id});\n     * emitter.add(() => console.log('World!'), {id});\n     * emitter.remove(id); // Same reference, it works!\n     * emitter.notify(); // Doesn't print.\n     * ```\n     *\n     * @param listener The registered callback or a value representing the `id`.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    remove(listener) {\n        if (this._notifying) {\n            this._transactions.push({ type: TransactionType.Removal, data: listener });\n            return this;\n        }\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const target = listeners[i];\n            if (target.callback === listener || target.id === listener) {\n                listeners.splice(i--, 1);\n            }\n        }\n        return this;\n    }\n    /**\n     * Check whether the listener is registered.\n     *\n     * @note This method performs a linear search.\n     *\n     * * @note Doesn't account for pending listeners, i.e.,\n     * listeners added / removed during a notification.\n     *\n     * @param listener The registered callback or a value representing the `id`.\n     * @returns `true` if the handle is found, `false` otherwise.\n     */\n    has(listener) {\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const target = listeners[i];\n            if (target.callback === listener || target.id === listener)\n                return true;\n        }\n        return false;\n    }\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @note This method ensures all listeners are called even if\n     * an exception is thrown. For (possibly) faster notification,\n     * please use {@link Emitter.notifyUnsafe}.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notify(...data) {\n        const listeners = this._listeners;\n        this._notifying = true;\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once)\n                listeners.splice(i--, 1);\n            try {\n                listener.callback(...data);\n            }\n            catch (e) {\n                console.error(e);\n            }\n        }\n        this._notifying = false;\n        /* Process deferred additions & removals */\n        this._flushTransactions();\n    }\n    /**\n     * Notify listeners with the given data object.\n     *\n     * @note Because this method doesn't catch exceptions, some listeners\n     * will be skipped on a throw. Please use {@link Emitter.notify} for safe\n     * notification.\n     *\n     * @param data The data to pass to listener when invoked.\n     */\n    notifyUnsafe(...data) {\n        const listeners = this._listeners;\n        for (let i = 0; i < listeners.length; ++i) {\n            const listener = listeners[i];\n            if (listener.once)\n                listeners.splice(i--, 1);\n            listener.callback(...data);\n        }\n        /* Process deferred additions & removals */\n        this._flushTransactions();\n    }\n    /**\n     * Return a promise that will resolve on the next event.\n     *\n     * @note The promise might never resolve if no event is sent.\n     *\n     * @returns A promise that resolves with the data passed to\n     *     {@link Emitter.notify}.\n     */\n    promise() {\n        return new Promise((res, _) => {\n            this.once((...args) => {\n                if (args.length > 1) {\n                    res(args);\n                }\n                else {\n                    res(args[0]);\n                }\n            });\n        });\n    }\n    /**\n     * Number of listeners.\n     *\n     * @note Doesn't account for pending listeners, i.e.,\n     * listeners added / removed during a notification.\n     */\n    get listenerCount() {\n        return this._listeners.length;\n    }\n    /** `true` if it has no listeners, `false` otherwise. */\n    get isEmpty() {\n        return this.listenerCount === 0;\n    }\n    /**\n     * Flush all pending transactions.\n     *\n     * @hidden\n     */\n    _flushTransactions() {\n        const listeners = this._listeners;\n        for (const transaction of this._transactions) {\n            if (transaction.type === TransactionType.Addition) {\n                listeners.push(transaction.data);\n            }\n            else {\n                this.remove(transaction.data);\n            }\n        }\n        this._transactions.length = 0;\n    }\n}\n/* Dummy value used with RetainEmitter. */\nconst RetainEmitterUndefined = {};\n/**\n * Event emitter that retains event data when notified.\n *\n * After a notification happens, subsequent calls to {@link RetainEmitter.add} will get\n * automatically notified.\n *\n * You can use another emitter in order to cancel the last retained event:\n *\n * ```js\n * import {Emitter, RetainedEmitter} from '@wonderlandengine/api';\n *\n * const onStart = new RetainedEmitter();\n *\n * onStart.notify(42);\n * onStart.add((data) => console.log(data)) // Prints '42'.\n * ```\n *\n * You can reset the state of the emitter, i.e., making it forget about the\n * last event using:\n *\n * ```js\n * import {Emitter, RetainedEmitter} from '@wonderlandengine/api';\n *\n * const onStart = new RetainedEmitter();\n * onStart.notify(42);\n * onStart.add((data) => console.log(data)) // Prints '42'.\n *\n * // Reset the state of the emitter.\n * onStart.reset();\n * onStart.add((data) => console.log(data)) // Doesn't print anything.\n * ```\n *\n * For more information about emitters, please have a look at the base {@link Emitter} class.\n *\n * @category event\n */\nexport class RetainEmitter extends Emitter {\n    /** Pre-resolved data. @hidden */\n    _event = RetainEmitterUndefined;\n    /**\n     * Emitter target used to reset the state of this emitter.\n     *\n     * @hidden\n     */\n    _reset;\n    /** @override */\n    add(listener, opts) {\n        const immediate = opts?.immediate ?? true;\n        if (this._event !== RetainEmitterUndefined && immediate) {\n            listener(...this._event);\n        }\n        super.add(listener, opts);\n        return this;\n    }\n    /**\n     * @override\n     *\n     * @param listener The callback to register.\n     * @param immediate If `true`, directly resolves if the emitter retains a value.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    once(listener, immediate) {\n        return this.add(listener, { once: true, immediate });\n    }\n    /** @override */\n    notify(...data) {\n        this._event = data;\n        super.notify(...data);\n    }\n    /** @override */\n    notifyUnsafe(...data) {\n        this._event = data;\n        super.notifyUnsafe(...data);\n    }\n    /**\n     * Reset the state of the emitter.\n     *\n     * Further call to {@link Emitter.add} will not automatically resolve,\n     * until a new call to {@link Emitter.notify} is performed.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    reset() {\n        this._event = RetainEmitterUndefined;\n        return this;\n    }\n    /** Returns the retained data, or `undefined` if no data was retained. */\n    get data() {\n        return this.isDataRetained ? this._event : undefined;\n    }\n    /** `true` if data is retained from the last event, `false` otherwise. */\n    get isDataRetained() {\n        return this._event !== RetainEmitterUndefined;\n    }\n}\n", "/**\n * Create a proxy throwing destroyed errors upon access.\n *\n * @param type The type to display upon error\n * @returns The proxy instance\n */\nfunction createDestroyedProxy(host, type) {\n    return new Proxy({}, {\n        get(_, param) {\n            if (param === 'isDestroyed')\n                return true;\n            throw new Error(`Cannot read '${param}' of destroyed '${type.name}' resource from ${host}`);\n        },\n        set(_, param) {\n            throw new Error(`Cannot write '${param}' of destroyed '${type.name}' resource from ${host}`);\n        },\n    });\n}\n/**\n * Base class for engine resources, such as:\n * - {@link Texture}\n * - {@link Mesh}\n * - {@link Material}\n *\n * @since 1.2.0\n */\nexport class Resource {\n    /** Relative index in the host. @hidden */\n    _index = -1;\n    /** For compatibility with SceneResource. @hidden */\n    _id = -1;\n    /** @hidden */\n    _engine;\n    constructor(engine, index) {\n        this._engine = engine;\n        this._index = index;\n        this._id = index;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n    /** Index of this resource in the {@link Scene}'s manager. */\n    get index() {\n        return this._index;\n    }\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecated Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const meshA = engine.meshes.create({vertexCount: 1});\n     * const meshB = engine.meshes.create({vertexCount: 1});\n     * const meshC = meshB;\n     * console.log(meshA === meshB); // false\n     * console.log(meshA === meshA); // true\n     * console.log(meshB === meshC); // true\n     * ```\n     */\n    equals(other) {\n        if (!other)\n            return false;\n        return this._index === other._index;\n    }\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed() {\n        return this._index <= 0;\n    }\n}\n/**\n * Base class for scene resources, such as:\n *  * - {@link Texture}\n * - {@link Mesh}\n * - {@link Material}\n * - {@link Skin}\n * - {@link Animation}\n *\n * @since 1.2.0\n */\nexport class SceneResource {\n    static _pack(scene, index) {\n        return (scene << 22) | index;\n    }\n    /** Relative index in the host. @hidden */\n    _index = -1;\n    /** For compatibility with SceneResource. @hidden */\n    _id = -1;\n    /** @hidden */\n    _scene;\n    constructor(scene, index) {\n        this._scene = scene;\n        this._index = index;\n        this._id = SceneResource._pack(scene._index, index);\n    }\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecated Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const meshA = engine.meshes.create({vertexCount: 1});\n     * const meshB = engine.meshes.create({vertexCount: 1});\n     * const meshC = meshB;\n     * console.log(meshA === meshB); // false\n     * console.log(meshA === meshA); // true\n     * console.log(meshB === meshC); // true\n     * ```\n     */\n    equals(other) {\n        if (!other)\n            return false;\n        return this._id === other._id;\n    }\n    /** Hosting instance. */\n    get scene() {\n        return this._scene;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n    /** Index of this resource in the {@link Scene}'s manager. */\n    get index() {\n        return this._index;\n    }\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a class attribute / method will throw.\n     */\n    get isDestroyed() {\n        return this._id <= 0;\n    }\n}\n/**\n * Manager for resources.\n *\n * Resources are accessed via the engine they belong to.\n *\n * @see {@link WonderlandEngine.textures}, {@link WonderlandEngine.meshes},\n * and {@link WonderlandEngine.materials}.\n *\n * @since 1.2.0\n */\nexport class ResourceManager {\n    /** @hidden */\n    _host;\n    /** Cache. @hidden */\n    _cache = [];\n    /** Resource class. @hidden */\n    _template;\n    /** Destructor proxy, used if {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`. @hidden */\n    _destructor = null;\n    _engine;\n    /**\n     * Create a new manager\n     *\n     * @param host The host containing the managed resources.\n     * @param Class The class to instantiate when wrapping an index.\n     *\n     * @hidden\n     */\n    constructor(host, Class) {\n        this._host = host;\n        this._template = Class;\n        this._engine = host.engine ?? host;\n    }\n    /**\n     * Wrap the index into a resource instance.\n     *\n     * @note The index is relative to the host, i.e., doesn't pack the host index (if any).\n     *\n     * @param index The resource index.\n     * @returns\n     */\n    wrap(index) {\n        if (index <= 0)\n            return null;\n        const texture = this._cache[index] ??\n            (this._cache[index] = new this._template(this._host, index));\n        return texture;\n    }\n    /**\n     * Retrieve the resource at the given index.\n     *\n     * @note The index is relative to the host, i.e., doesn't pack the host index.\n     */\n    get(index) {\n        return this._cache[index] ?? null;\n    }\n    /** Number of textures allocated in the manager. */\n    get allocatedCount() {\n        return this._cache.length;\n    }\n    /**\n     * Number of textures in the manager.\n     *\n     * @note For performance reasons, avoid calling this method when possible.\n     */\n    get count() {\n        let count = 0;\n        for (const res of this._cache) {\n            if (res && res.index >= 0)\n                ++count;\n        }\n        return count;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n    /**\n     * Destroy the instance.\n     *\n     * @note This method takes care of the prototype destruction.\n     *\n     * @hidden\n     */\n    _destroy(instance) {\n        const index = instance.index;\n        instance._index = -1;\n        instance._id = -1;\n        this._cache[index] = null;\n        if (!this.engine.erasePrototypeOnDestroy)\n            return;\n        if (!this._destructor)\n            this._destructor = createDestroyedProxy(this._host, this._template);\n        Object.setPrototypeOf(instance, this._destructor);\n    }\n    /**\n     * Mark all instances as destroyed.\n     *\n     * @hidden\n     */\n    _clear() {\n        if (!this.engine.erasePrototypeOnDestroy)\n            return;\n        for (let i = 0; i < this._cache.length; ++i) {\n            const instance = this._cache[i];\n            if (instance)\n                this._destroy(instance);\n        }\n        this._cache.length = 0;\n    }\n}\n", "/**\n * Schedule a timeout, resolving in `time` milliseconds.\n *\n * @note `setTimeout` being a macro-task, this method can\n * be use as a debounce call.\n *\n * @param time The time until it resolves, in milliseconds.\n * @returns A promise resolving in `time` ms.\n */\nexport function timeout(time) {\n    return new Promise((res) => setTimeout(res, time));\n}\n/**\n * Clamp the value in the range [min; max].\n *\n * @param val The value to clamp.\n * @param min The minimum value (inclusive).\n * @param max The maximum value (inclusive).\n * @returns The clamped value.\n */\nexport function clamp(val, min, max) {\n    return Math.max(Math.min(max, val), min);\n}\n/**\n * Capitalize the first letter in a string.\n *\n * @note The string must be UTF-8.\n *\n * @param str The string to format.\n * @returns The string with the first letter capitalized.\n */\nexport function capitalizeFirstUTF8(str) {\n    return `${str[0].toUpperCase()}${str.substring(1)}`;\n}\n/**\n * Create a proxy throwing destroyed errors upon access.\n *\n * @param type The type to display upon error\n * @returns The proxy instance\n */\nexport function createDestroyedProxy(type) {\n    return new Proxy({}, {\n        get(_, param) {\n            if (param === 'isDestroyed')\n                return true;\n            throw new Error(`Cannot read '${param}' of destroyed ${type}`);\n        },\n        set(_, param) {\n            throw new Error(`Cannot write '${param}' of destroyed ${type}`);\n        },\n    });\n}\n", "/**\n * Types\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { nativeProperty, enumerable } from './decorators.js';\nimport { isImageLike, isNumber, isString } from './utils/object.js';\nimport { Emitter } from './utils/event.js';\nimport { Type, defaultPropertyCloner } from './property.js';\nimport { Resource, SceneResource } from './resources/resource.js';\nimport { Prefab } from './prefab.js';\nimport { createDestroyedProxy } from './utils/misc.js';\n/**\n * Wonderland Engine API\n * @namespace WL\n */\n/**\n * Default set of logging tags used by the API.\n */\nexport var LogTag;\n(function (LogTag) {\n    /** Initialization, component registration, etc... */\n    LogTag[LogTag[\"Engine\"] = 0] = \"Engine\";\n    /** Scene loading */\n    LogTag[LogTag[\"Scene\"] = 1] = \"Scene\";\n    /** Component init, update, etc... */\n    LogTag[LogTag[\"Component\"] = 2] = \"Component\";\n})(LogTag || (LogTag = {}));\n/**\n * Collider type enum for {@link CollisionComponent}.\n */\nexport var Collider;\n(function (Collider) {\n    /**\n     * **Sphere Collider**:\n     *\n     * Simplest and most performant collision shape. If this type is set on a\n     * {@link CollisionComponent}, only the first component of\n     * {@link CollisionComponent#extents} will be used to determine the radius.\n     */\n    Collider[Collider[\"Sphere\"] = 0] = \"Sphere\";\n    /**\n     * **Axis Aligned Bounding Box Collider**:\n     *\n     * Box that is always aligned to XYZ axis. It cannot be rotated but is more\n     * efficient than {@link Collider.Box}.\n     */\n    Collider[Collider[\"AxisAlignedBox\"] = 1] = \"AxisAlignedBox\";\n    /**\n     * **Aligned Bounding Box Collider**:\n     *\n     * Box that matches the object's rotation and translation correctly. This\n     * is the least efficient collider and should only be chosen over\n     * {@link Collider.Sphere} and {@link Collider.AxisAlignedBox} if really\n     * necessary.\n     */\n    Collider[Collider[\"Box\"] = 2] = \"Box\";\n})(Collider || (Collider = {}));\n/**\n * Alignment type enum for {@link TextComponent}.\n */\nexport var Alignment;\n(function (Alignment) {\n    /** Text start is at object origin */\n    Alignment[Alignment[\"Left\"] = 0] = \"Left\";\n    /** Text center is at object origin */\n    Alignment[Alignment[\"Center\"] = 1] = \"Center\";\n    /** Text end is at object origin */\n    Alignment[Alignment[\"Right\"] = 2] = \"Right\";\n})(Alignment || (Alignment = {}));\n/**\n * Vertical alignment type enum for {@link TextComponent}.\n */\nexport var VerticalAlignment;\n(function (VerticalAlignment) {\n    /** Text line is at object origin */\n    VerticalAlignment[VerticalAlignment[\"Line\"] = 0] = \"Line\";\n    /** Text middle is at object origin */\n    VerticalAlignment[VerticalAlignment[\"Middle\"] = 1] = \"Middle\";\n    /** Text top is at object origin */\n    VerticalAlignment[VerticalAlignment[\"Top\"] = 2] = \"Top\";\n    /** Text bottom is at object origin */\n    VerticalAlignment[VerticalAlignment[\"Bottom\"] = 3] = \"Bottom\";\n})(VerticalAlignment || (VerticalAlignment = {}));\n/**\n * Justification type enum for {@link TextComponent}.\n *\n * @deprecated Please use {@link VerticalAlignment} instead.\n */\nexport const Justification = VerticalAlignment;\n/**\n * Effect type enum for {@link TextComponent}.\n */\nexport var TextEffect;\n(function (TextEffect) {\n    /** Text is rendered normally */\n    TextEffect[TextEffect[\"None\"] = 0] = \"None\";\n    /** Text is rendered with an outline */\n    TextEffect[TextEffect[\"Outline\"] = 1] = \"Outline\";\n})(TextEffect || (TextEffect = {}));\n/**\n * Input type enum for {@link InputComponent}.\n */\nexport var InputType;\n(function (InputType) {\n    /** Head input */\n    InputType[InputType[\"Head\"] = 0] = \"Head\";\n    /** Left eye input */\n    InputType[InputType[\"EyeLeft\"] = 1] = \"EyeLeft\";\n    /** Right eye input */\n    InputType[InputType[\"EyeRight\"] = 2] = \"EyeRight\";\n    /** Left controller input */\n    InputType[InputType[\"ControllerLeft\"] = 3] = \"ControllerLeft\";\n    /** Right controller input */\n    InputType[InputType[\"ControllerRight\"] = 4] = \"ControllerRight\";\n    /** Left ray input */\n    InputType[InputType[\"RayLeft\"] = 5] = \"RayLeft\";\n    /** Right ray input */\n    InputType[InputType[\"RayRight\"] = 6] = \"RayRight\";\n})(InputType || (InputType = {}));\n/**\n * Light type enum for {@link LightComponent}.\n */\nexport var LightType;\n(function (LightType) {\n    /** Point light */\n    LightType[LightType[\"Point\"] = 0] = \"Point\";\n    /** Spot light */\n    LightType[LightType[\"Spot\"] = 1] = \"Spot\";\n    /** Sun light / Directional light */\n    LightType[LightType[\"Sun\"] = 2] = \"Sun\";\n})(LightType || (LightType = {}));\n/**\n * Animation state of {@link AnimationComponent}.\n */\nexport var AnimationState;\n(function (AnimationState) {\n    /** Animation is currently playing */\n    AnimationState[AnimationState[\"Playing\"] = 0] = \"Playing\";\n    /** Animation is paused and will continue at current playback\n     * time on {@link AnimationComponent#play} */\n    AnimationState[AnimationState[\"Paused\"] = 1] = \"Paused\";\n    /** Animation is stopped */\n    AnimationState[AnimationState[\"Stopped\"] = 2] = \"Stopped\";\n})(AnimationState || (AnimationState = {}));\n/**\n * Rigid body force mode for {@link PhysXComponent#addForce} and {@link PhysXComponent#addTorque}.\n *\n * [PhysX API Reference](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxapi/files/structPxForceMode.html)\n */\nexport var ForceMode;\n(function (ForceMode) {\n    /** Apply as force */\n    ForceMode[ForceMode[\"Force\"] = 0] = \"Force\";\n    /** Apply as impulse */\n    ForceMode[ForceMode[\"Impulse\"] = 1] = \"Impulse\";\n    /** Apply as velocity change, mass dependent */\n    ForceMode[ForceMode[\"VelocityChange\"] = 2] = \"VelocityChange\";\n    /** Apply as mass dependent force */\n    ForceMode[ForceMode[\"Acceleration\"] = 3] = \"Acceleration\";\n})(ForceMode || (ForceMode = {}));\n/**\n * Collision callback event type.\n */\nexport var CollisionEventType;\n(function (CollisionEventType) {\n    /** Touch/contact detected, collision */\n    CollisionEventType[CollisionEventType[\"Touch\"] = 0] = \"Touch\";\n    /** Touch/contact lost, uncollide */\n    CollisionEventType[CollisionEventType[\"TouchLost\"] = 1] = \"TouchLost\";\n    /** Touch/contact with trigger detected */\n    CollisionEventType[CollisionEventType[\"TriggerTouch\"] = 2] = \"TriggerTouch\";\n    /** Touch/contact with trigger lost */\n    CollisionEventType[CollisionEventType[\"TriggerTouchLost\"] = 3] = \"TriggerTouchLost\";\n})(CollisionEventType || (CollisionEventType = {}));\n/**\n * Rigid body {@link PhysXComponent#shape}.\n *\n * [PhysX SDK Guide](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/Geometry.html#geometry-types).\n */\nexport var Shape;\n(function (Shape) {\n    /** No shape. */\n    Shape[Shape[\"None\"] = 0] = \"None\";\n    /** Sphere shape. */\n    Shape[Shape[\"Sphere\"] = 1] = \"Sphere\";\n    /** Capsule shape. */\n    Shape[Shape[\"Capsule\"] = 2] = \"Capsule\";\n    /** Box shape. */\n    Shape[Shape[\"Box\"] = 3] = \"Box\";\n    /** Plane shape. */\n    Shape[Shape[\"Plane\"] = 4] = \"Plane\";\n    /** Convex mesh shape. */\n    Shape[Shape[\"ConvexMesh\"] = 5] = \"ConvexMesh\";\n    /** Triangle mesh shape. */\n    Shape[Shape[\"TriangleMesh\"] = 6] = \"TriangleMesh\";\n})(Shape || (Shape = {}));\n/**\n * Mesh attribute enum.\n * @since 0.9.0\n */\nexport var MeshAttribute;\n(function (MeshAttribute) {\n    /** Position attribute, 3 floats */\n    MeshAttribute[MeshAttribute[\"Position\"] = 0] = \"Position\";\n    /** Tangent attribute, 4 floats */\n    MeshAttribute[MeshAttribute[\"Tangent\"] = 1] = \"Tangent\";\n    /** Normal attribute, 3 floats */\n    MeshAttribute[MeshAttribute[\"Normal\"] = 2] = \"Normal\";\n    /** Texture coordinate attribute, 2 floats */\n    MeshAttribute[MeshAttribute[\"TextureCoordinate\"] = 3] = \"TextureCoordinate\";\n    /** Color attribute, 4 floats, RGBA, range `0` to `1` */\n    MeshAttribute[MeshAttribute[\"Color\"] = 4] = \"Color\";\n    /** Joint id attribute, 8 unsigned ints */\n    MeshAttribute[MeshAttribute[\"JointId\"] = 5] = \"JointId\";\n    /** Joint weights attribute, 8 floats */\n    MeshAttribute[MeshAttribute[\"JointWeight\"] = 6] = \"JointWeight\";\n})(MeshAttribute || (MeshAttribute = {}));\n/** Proxy used to override prototypes of destroyed objects. */\nexport const DestroyedObjectInstance = createDestroyedProxy('object');\n/** Proxy used to override prototypes of destroyed components. */\nexport const DestroyedComponentInstance = createDestroyedProxy('component');\n/** Proxy used to override prototypes of destroyed prefabs. */\nexport const DestroyedPrefabInstance = createDestroyedProxy('prefab/scene');\n/**\n * Check whether a given shape is a mesh or not.\n *\n * @param shape The shape to check.\n * @returns `true` if the shape is a mesh, `false` if it's a primitive.\n */\nfunction isMeshShape(shape) {\n    return shape === Shape.ConvexMesh || shape === Shape.TriangleMesh;\n}\n/**\n * Check whether an object is the {@link Component} class or not,\n *\n * @note This method if foolproof to developers inadvertently using\n * multiple Wonderland Engine API in a bundle.\n *\n * @param value The object to check.\n * @returns `true` if the object is a {@link Component} class, `false` otherwise.\n */\nfunction isBaseComponentClass(value) {\n    return (!!value &&\n        value.hasOwnProperty('_isBaseComponent') &&\n        value._isBaseComponent);\n}\n/**\n * Constants.\n */\n/**\n * Default world up vector.\n */\nconst UP_VECTOR = [0, 1, 0];\nconst SQRT_3 = Math.sqrt(3);\n/**\n * Provides access to a component instance of a specified component type.\n *\n * @example\n *\n * This is how you extend this class to create your own custom\n * component:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     static Properties = {\n *         myBoolean: { type: Type.Boolean, default: false },\n *     };\n *     start() {}\n *     onActivate() {}\n *     onDeactivate() {}\n *     update(dt) {}\n * }\n * ```\n *\n * In a component, the scene can be accessed using `this.scene`:\n *\n * ```js\n * import { Component, Type } from '@wonderlandengine/api';\n *\n * export class MyComponent extends Component {\n *     static TypeName = 'my-component';\n *     start() {\n *         const obj = this.scene.addObject();\n *     }\n * }\n * ```\n */\nexport class Component {\n    /**\n     * Pack scene index and component id.\n     *\n     * @param scene Scene index.\n     * @param id Component id.\n     * @returns The packed id.\n     *\n     * @hidden\n     */\n    static _pack(scene, id) {\n        return (scene << 22) | id;\n    }\n    /**\n     * `true` for every class inheriting from this class.\n     *\n     * @note This is a workaround for `instanceof` to prevent issues\n     * that could arise when an application ends up using multiple API versions.\n     *\n     * @hidden\n     */\n    static _isBaseComponent = true;\n    /**\n     * Fixed order of attributes in the `Properties` array.\n     *\n     * @note This is used for parameter deserialization and is filled during\n     * component registration.\n     *\n     * @hidden\n     */\n    static _propertyOrder = [];\n    /**\n     * Unique identifier for this component class.\n     *\n     * This is used to register, add, and retrieve components of a given type.\n     */\n    static TypeName;\n    /**\n     * Properties of this component class.\n     *\n     * Properties are public attributes that can be configured via the\n     * Wonderland Editor.\n     *\n     * Example:\n     *\n     * ```js\n     * import { Component, Type } from '@wonderlandengine/api';\n     * class MyComponent extends Component {\n     *     static TypeName = 'my-component';\n     *     static Properties = {\n     *         myBoolean: { type: Type.Boolean, default: false },\n     *         myFloat: { type: Type.Float, default: false },\n     *         myTexture: { type: Type.Texture, default: null },\n     *     };\n     * }\n     * ```\n     *\n     * Properties are automatically added to each component instance, and are\n     * accessible like any JS attribute:\n     *\n     * ```js\n     * // Creates a new component and set each properties value:\n     * const myComponent = object.addComponent(MyComponent, {\n     *     myBoolean: true,\n     *     myFloat: 42.0,\n     *     myTexture: null\n     * });\n     *\n     * // You can also override the properties on the instance:\n     * myComponent.myBoolean = false;\n     * myComponent.myFloat = -42.0;\n     * ```\n     *\n     * #### References\n     *\n     * Reference types (i.e., mesh, object, etc...) can also be listed as **required**:\n     *\n     * ```js\n     * import {Component, Property} from '@wonderlandengine/api';\n     *\n     * class MyComponent extends Component {\n     *     static Properties = {\n     *         myObject: Property.object({required: true}),\n     *         myAnimation: Property.animation({required: true}),\n     *         myTexture: Property.texture({required: true}),\n     *         myMesh: Property.mesh({required: true}),\n     *     }\n     * }\n     * ```\n     *\n     * Please note that references are validated **once** before the call to {@link Component.start} only,\n     * via the {@link Component.validateProperties} method.\n     */\n    static Properties;\n    /**\n     * When set to `true`, the child class inherits from the parent\n     * properties, as shown in the following example:\n     *\n     * ```js\n     * import {Component, Property} from '@wonderlandengine/api';\n     *\n     * class Parent extends Component {\n     *     static TypeName = 'parent';\n     *     static Properties = {parentName: Property.string('parent')}\n     * }\n     *\n     * class Child extends Parent {\n     *     static TypeName = 'child';\n     *     static Properties = {name: Property.string('child')}\n     *     static InheritProperties = true;\n     *\n     *     start() {\n     *         // Works because `InheritProperties` is `true`.\n     *         console.log(`${this.name} inherits from ${this.parentName}`);\n     *     }\n     * }\n     * ```\n     *\n     * @note Properties defined in descendant classes will override properties\n     * with the same name defined in ancestor classes.\n     *\n     * Defaults to `true`.\n     */\n    static InheritProperties;\n    /**\n     * Called when this component class is registered.\n     *\n     * @example\n     *\n     * This callback can be used to register dependencies of a component,\n     * e.g., component classes that need to be registered in order to add\n     * them at runtime with {@link Object3D.addComponent}, independent of whether\n     * they are used in the editor.\n     *\n     * ```js\n     * class Spawner extends Component {\n     *     static TypeName = 'spawner';\n     *\n     *     static onRegister(engine) {\n     *         engine.registerComponent(SpawnedComponent);\n     *     }\n     *\n     *     // You can now use addComponent with SpawnedComponent\n     * }\n     * ```\n     *\n     * @example\n     *\n     * This callback can be used to register different implementations of a\n     * component depending on client features or API versions.\n     *\n     * ```js\n     * // Properties need to be the same for all implementations!\n     * const SharedProperties = {};\n     *\n     * class Anchor extends Component {\n     *     static TypeName = 'spawner';\n     *     static Properties = SharedProperties;\n     *\n     *     static onRegister(engine) {\n     *         if(navigator.xr === undefined) {\n     *             /* WebXR unsupported, keep this dummy component *\\/\n     *             return;\n     *         }\n     *         /* WebXR supported! Override already registered dummy implementation\n     *          * with one depending on hit-test API support *\\/\n     *         engine.registerComponent(window.HitTestSource === undefined ?\n     *             AnchorWithoutHitTest : AnchorWithHitTest);\n     *     }\n     *\n     *     // This one implements no functions\n     * }\n     * ```\n     */\n    static onRegister;\n    /**\n     * Allows to inherit properties directly inside the editor.\n     *\n     * @note Do not use directly, prefer using {@link inheritProperties}.\n     *\n     * @hidden\n     */\n    static _inheritProperties() {\n        inheritProperties(this);\n    }\n    /** Manager index. @hidden */\n    _manager;\n    /** Packed id, containing the scene and the local id. @hidden */\n    _id;\n    /** Id relative to the scene component's manager. @hidden */\n    _localId;\n    /**\n     * Object containing this object.\n     *\n     * **Note**: This is cached for faster retrieval.\n     *\n     * @hidden\n     */\n    _object;\n    /** Scene instance. @hidden */\n    _scene;\n    /**\n     * Create a new instance\n     *\n     * @param engine The engine instance.\n     * @param manager Index of the manager.\n     * @param id WASM component instance index.\n     *\n     * @hidden\n     */\n    constructor(scene, manager = -1, id = -1) {\n        this._scene = scene;\n        this._manager = manager;\n        this._localId = id;\n        this._id = Component._pack(scene._index, id);\n        this._object = null;\n    }\n    /** Scene this component is part of. */\n    get scene() {\n        return this._scene;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n    /** The name of this component's type */\n    get type() {\n        const ctor = this.constructor;\n        return ctor.TypeName;\n    }\n    /** The object this component is attached to. */\n    get object() {\n        if (!this._object) {\n            const objectId = this.engine.wasm._wl_component_get_object(this._manager, this._id);\n            this._object = this._scene.wrap(objectId);\n        }\n        return this._object;\n    }\n    /**\n     * Set whether this component is active.\n     *\n     * Activating/deactivating a component comes at a small cost of reordering\n     * components in the respective component manager. This function therefore\n     * is not a trivial assignment.\n     *\n     * Does nothing if the component is already activated/deactivated.\n     *\n     * @param active New active state.\n     */\n    set active(active) {\n        this.engine.wasm._wl_component_setActive(this._manager, this._id, active);\n    }\n    /** `true` if the component is marked as active and its scene is active. */\n    get active() {\n        return this.markedActive && this._scene.isActive;\n    }\n    /**\n     * `true` if the component is marked as active in the scene, `false` otherwise.\n     *\n     * @note At the opposite of {@link Component.active}, this accessor doesn't\n     * take into account whether the scene is active or not.\n     */\n    get markedActive() {\n        return this.engine.wasm._wl_component_isActive(this._manager, this._id) != 0;\n    }\n    /**\n     * Copy all the properties from `src` into this instance.\n     *\n     * @note Only properties are copied. If a component needs to\n     * copy extra data, it needs to override this method.\n     *\n     * #### Example\n     *\n     * ```js\n     * class MyComponent extends Component {\n     *     nonPropertyData = 'Hello World';\n     *\n     *     copy(src) {\n     *         super.copy(src);\n     *         this.nonPropertyData = src.nonPropertyData;\n     *         return this;\n     *     }\n     * }\n     * ```\n     *\n     * @note This method is called by {@link Object3D.clone}. Do not attempt to:\n     *     - Create new component\n     *     - Read references to other objects\n     *\n     * When cloning via {@link Object3D.clone}, this method will be called before\n     * {@link Component.start}.\n     *\n     * @note JavaScript component properties aren't retargeted. Thus, references\n     * inside the source object will not be retargeted to the destination object,\n     * at the exception of the skin data on {@link MeshComponent} and {@link AnimationComponent}.\n     *\n     * @param src The source component to copy from.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    copy(src) {\n        const ctor = this.constructor;\n        const properties = ctor.Properties;\n        if (!properties)\n            return this;\n        for (const name in properties) {\n            const property = properties[name];\n            const value = src[name];\n            if (value === undefined)\n                continue;\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            this[name] = cloner.clone(property.type, value);\n        }\n        return this;\n    }\n    /**\n     * Remove this component from its objects and destroy it.\n     *\n     * It is best practice to set the component to `null` after,\n     * to ensure it does not get used later.\n     *\n     * ```js\n     *    c.destroy();\n     *    c = null;\n     * ```\n     * @since 0.9.0\n     */\n    destroy() {\n        const manager = this._manager;\n        if (manager < 0 || this._id < 0)\n            return;\n        /* This call will mark the component destroyed,\n         * automatically calling `_triggerOnDestroy`.  */\n        this.engine.wasm._wl_component_remove(manager, this._id);\n    }\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecate Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const componentA = obj.addComponent('mesh');\n     * const componentB = obj.addComponent('mesh');\n     * const componentC = componentB;\n     * console.log(componentA === componentB); // false\n     * console.log(componentA === componentA); // true\n     * console.log(componentB === componentC); // true\n     * ```\n     */\n    equals(otherComponent) {\n        /** @todo(2.0.0): Remove this method. */\n        if (!otherComponent)\n            return false;\n        return this._manager === otherComponent._manager && this._id === otherComponent._id;\n    }\n    /**\n     * Reset the component properties to default.\n     *\n     * @note This is automatically called during the component instantiation.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetProperties() {\n        const ctor = this.constructor;\n        const properties = ctor.Properties;\n        if (!properties)\n            return this;\n        for (const name in properties) {\n            const property = properties[name];\n            const cloner = property.cloner ?? defaultPropertyCloner;\n            this[name] = cloner.clone(property.type, property.default);\n        }\n        return this;\n    }\n    /** @deprecated Use {@link Component.resetProperties} instead. */\n    reset() {\n        return this.resetProperties();\n    }\n    /**\n     * Validate the properties on this instance.\n     *\n     * @throws If any of the required properties isn't initialized\n     * on this instance.\n     */\n    validateProperties() {\n        const ctor = this.constructor;\n        if (!ctor.Properties)\n            return;\n        for (const name in ctor.Properties) {\n            if (!ctor.Properties[name].required)\n                continue;\n            if (!this[name]) {\n                throw new Error(`Property '${name}' is required but was not initialized`);\n            }\n        }\n    }\n    /** @overload */\n    toString() {\n        if (this.isDestroyed) {\n            return 'Component(destroyed)';\n        }\n        return `Component('${this.type}', ${this._localId})`;\n    }\n    /**\n     * `true` if the component is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a custom property will not work:\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const comp = obj.addComponent('mesh');\n     * comp.customParam = 'Hello World!';\n     *\n     * console.log(comp.isDestroyed); // Prints `false`\n     * comp.destroy();\n     * console.log(comp.isDestroyed); // Prints `true`\n     * console.log(comp.customParam); // Throws an error\n     * ```\n     *\n     * @since 1.1.1\n     */\n    get isDestroyed() {\n        return this._id < 0;\n    }\n    _copy(src, offsetsPtr) {\n        const wasm = this.engine.wasm;\n        /** @todo: Support retargeting for `Object3D.clone` as well. */\n        const offsets = wasm.HEAPU32;\n        const offsetsStart = offsetsPtr >>> 2;\n        const destScene = this._scene;\n        const ctor = this.constructor;\n        for (const name in ctor.Properties) {\n            const value = src[name];\n            if (value === null) {\n                this[name] = null;\n                continue;\n            }\n            const prop = ctor.Properties[name];\n            const offset = offsets[offsetsStart + prop.type];\n            let retargeted;\n            switch (prop.type) {\n                case Type.Object: {\n                    const index = wasm._wl_object_index(value._id);\n                    const id = wasm._wl_object_id(destScene._index, index + offset);\n                    retargeted = destScene.wrap(id);\n                    break;\n                }\n                case Type.Animation:\n                    retargeted = destScene.animations.wrap(offset + value._index);\n                    break;\n                case Type.Skin:\n                    retargeted = destScene.skins.wrap(offset + value._index);\n                    break;\n                default:\n                    const cloner = prop.cloner ?? defaultPropertyCloner;\n                    retargeted = cloner.clone(prop.type, value);\n                    break;\n            }\n            this[name] = retargeted;\n        }\n        return this;\n    }\n    /**\n     * Trigger the component {@link Component.init} method.\n     *\n     * @note Use this method instead of directly calling {@link Component.init},\n     * because this method creates an handler for the {@link Component.start}.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerInit() {\n        if (this.init) {\n            try {\n                this.init();\n            }\n            catch (e) {\n                this.engine.log.error(LogTag.Component, `Exception during ${this.type} init() on object ${this.object.name}`);\n                this.engine.log.error(LogTag.Component, e);\n            }\n        }\n        /* Arm onActivate() with the initial start() call */\n        const oldActivate = this.onActivate;\n        this.onActivate = function () {\n            this.onActivate = oldActivate;\n            let failed = false;\n            try {\n                this.validateProperties();\n            }\n            catch (e) {\n                this.engine.log.error(LogTag.Component, `Exception during ${this.type} validateProperties() on object ${this.object.name}`);\n                this.engine.log.error(LogTag.Component, e);\n                failed = true;\n            }\n            try {\n                this.start?.();\n            }\n            catch (e) {\n                this.engine.log.error(LogTag.Component, `Exception during ${this.type} start() on object ${this.object.name}`);\n                this.engine.log.error(LogTag.Component, e);\n                failed = true;\n            }\n            if (failed) {\n                this.active = false;\n                return;\n            }\n            if (!this.onActivate)\n                return;\n            try {\n                this.onActivate();\n            }\n            catch (e) {\n                this.engine.log.error(LogTag.Component, `Exception during ${this.type} onActivate() on object ${this.object.name}`);\n                this.engine.log.error(LogTag.Component, e);\n            }\n        };\n    }\n    /**\n     * Trigger the component {@link Component.update} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerUpdate(dt) {\n        if (!this.update)\n            return;\n        try {\n            this.update(dt);\n        }\n        catch (e) {\n            this.engine.log.error(LogTag.Component, `Exception during ${this.type} update() on object ${this.object.name}`);\n            this.engine.log.error(LogTag.Component, e);\n            if (this.engine.wasm._deactivate_component_on_error) {\n                this.active = false;\n            }\n        }\n    }\n    /**\n     * Trigger the component {@link Component.onActivate} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnActivate() {\n        if (!this.onActivate)\n            return;\n        try {\n            this.onActivate();\n        }\n        catch (e) {\n            this.engine.log.error(LogTag.Component, `Exception during ${this.type} onActivate() on object ${this.object.name}`);\n            this.engine.log.error(LogTag.Component, e);\n        }\n    }\n    /**\n     * Trigger the component {@link Component.onDeactivate} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnDeactivate() {\n        if (!this.onDeactivate)\n            return;\n        try {\n            this.onDeactivate();\n        }\n        catch (e) {\n            this.engine.log.error(LogTag.Component, `Exception during ${this.type} onDeactivate() on object ${this.object.name}`);\n            this.engine.log.error(LogTag.Component, e);\n        }\n    }\n    /**\n     * Trigger the component {@link Component.onDestroy} method.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @hidden\n     */\n    _triggerOnDestroy() {\n        try {\n            if (this.onDestroy)\n                this.onDestroy();\n        }\n        catch (e) {\n            this.engine.log.error(LogTag.Component, `Exception during ${this.type} onDestroy() on object ${this.object.name}`);\n            this.engine.log.error(LogTag.Component, e);\n        }\n        this._scene._components.destroy(this);\n    }\n}\n/**\n * Components must be registered before loading / appending a scene.\n *\n * It's possible to end up with a broken component in the following cases:\n *\n * - Component wasn't registered when the scene was loaded\n * - Component instantiation failed\n *\n * This dummy component is thus used as a placeholder by the engine.\n */\nexport class BrokenComponent extends Component {\n    static TypeName = '__broken-component__';\n}\n/**\n * Merge the ascendant properties of class\n *\n * This method walks the prototype chain, and merges\n * all the properties found in parent components.\n *\n * Example:\n *\n * ```js\n * import {Property, inheritProperties} from '@wonderlandengine/api';\n *\n * class Parent {\n *     static Properties = { parentProp: Property.string('parent') };\n * }\n *\n * class Child extends Parent {\n *     static Properties = { childProp: Property.string('child') };\n * }\n * inheritProperties(Child);\n * ```\n *\n * @param target The class in which properties should be merged\n *\n * @hidden\n */\nexport function inheritProperties(target) {\n    if (!target.TypeName)\n        return;\n    const chain = [];\n    let curr = target;\n    while (curr && !isBaseComponentClass(curr)) {\n        const comp = curr;\n        /* Stop at the first class that doesn't require properties merging */\n        const needsMerge = comp.hasOwnProperty('InheritProperties')\n            ? comp.InheritProperties\n            : true;\n        if (!needsMerge)\n            break;\n        if (comp.TypeName && comp.hasOwnProperty('Properties')) {\n            chain.push(comp);\n        }\n        curr = Object.getPrototypeOf(curr);\n    }\n    /* No prototype merge is needed. */\n    if (!chain.length || (chain.length === 1 && chain[0] === target)) {\n        return;\n    }\n    const merged = {};\n    for (let i = chain.length - 1; i >= 0; --i) {\n        Object.assign(merged, chain[i].Properties);\n    }\n    target.Properties = merged;\n}\n/**\n * Native collision component.\n *\n * Provides access to a native collision component instance.\n */\nexport class CollisionComponent extends Component {\n    /** @override */\n    static TypeName = 'collision';\n    getExtents(out = new Float32Array(3)) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_collision_component_get_extents(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n    /** Collision component collider */\n    get collider() {\n        return this.engine.wasm._wl_collision_component_get_collider(this._id);\n    }\n    /**\n     * Set collision component collider.\n     *\n     * @param collider Collider of the collision component.\n     */\n    set collider(collider) {\n        this.engine.wasm._wl_collision_component_set_collider(this._id, collider);\n    }\n    /**\n     * Equivalent to {@link CollisionComponent.getExtents}.\n     *\n     * @note Prefer to use {@link CollisionComponent.getExtents} for performance.\n     */\n    get extents() {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_collision_component_get_extents(this._id), 3);\n    }\n    /**\n     * Set collision component extents.\n     *\n     * If {@link collider} returns {@link Collider.Sphere}, only the first\n     * component of the passed vector is used.\n     *\n     * Example:\n     *\n     * ```js\n     * // Spans 1 unit on the x-axis, 2 on the y-axis, 3 on the z-axis.\n     * collision.extent = [1, 2, 3];\n     * ```\n     *\n     * @param extents Extents of the collision component, expects a\n     *      3 component array.\n     */\n    set extents(extents) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_collision_component_get_extents(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = extents[0];\n        wasm.HEAPF32[ptr + 1] = extents[1];\n        wasm.HEAPF32[ptr + 2] = extents[2];\n    }\n    /**\n     * Get collision component radius.\n     *\n     * @note If {@link collider} is not {@link Collider.Sphere}, the returned value\n     * corresponds to the radius of a sphere enclosing the shape.\n     *\n     * Example:\n     *\n     * ```js\n     * sphere.radius = 3.0;\n     * console.log(sphere.radius); // 3.0\n     *\n     * box.extents = [2.0, 2.0, 2.0];\n     * console.log(box.radius); // 1.732...\n     * ```\n     *\n     */\n    get radius() {\n        const wasm = this.engine.wasm;\n        if (this.collider === Collider.Sphere)\n            return wasm.HEAPF32[wasm._wl_collision_component_get_extents(this._id) >> 2];\n        const extents = new Float32Array(wasm.HEAPF32.buffer, wasm._wl_collision_component_get_extents(this._id), 3);\n        const x2 = extents[0] * extents[0];\n        const y2 = extents[1] * extents[1];\n        const z2 = extents[2] * extents[2];\n        return Math.sqrt(x2 + y2 + z2) / 2;\n    }\n    /**\n     * Set collision component radius.\n     *\n     * @param radius Radius of the collision component\n     *\n     * @note If {@link collider} is not {@link Collider.Sphere},\n     * the extents are set to form a square that fits a sphere with the provided radius.\n     *\n     * Example:\n     *\n     * ```js\n     * aabbCollision.radius = 2.0; // AABB fits a sphere of radius 2.0\n     * boxCollision.radius = 3.0; // Box now fits a sphere of radius 3.0, keeping orientation\n     * ```\n     *\n     */\n    set radius(radius) {\n        const length = this.collider === Collider.Sphere ? radius : (2 * radius) / SQRT_3;\n        this.extents.set([length, length, length]);\n    }\n    /**\n     * Collision component group.\n     *\n     * The groups is a bitmask that is compared to other components in {@link CollisionComponent#queryOverlaps}\n     * or the group in {@link Scene#rayCast}.\n     *\n     * Colliders that have no common groups will not overlap with each other. If a collider\n     * has none of the groups set for {@link Scene#rayCast}, the ray will not hit it.\n     *\n     * Each bit represents belonging to a group, see example.\n     *\n     * ```js\n     *    // c belongs to group 2\n     *    c.group = (1 << 2);\n     *\n     *    // c belongs to group 0\n     *    c.group = (1 << 0);\n     *\n     *    // c belongs to group 0 *and* 2\n     *    c.group = (1 << 0) | (1 << 2);\n     *\n     *    (c.group & (1 << 2)) != 0; // true\n     *    (c.group & (1 << 7)) != 0; // false\n     * ```\n     */\n    get group() {\n        return this.engine.wasm._wl_collision_component_get_group(this._id);\n    }\n    /**\n     * Set collision component group.\n     *\n     * @param group Group mask of the collision component.\n     */\n    set group(group) {\n        this.engine.wasm._wl_collision_component_set_group(this._id, group);\n    }\n    /**\n     * Query overlapping objects.\n     *\n     * Usage:\n     *\n     * ```js\n     * const collision = object.getComponent('collision');\n     * const overlaps = collision.queryOverlaps();\n     * for(const otherCollision of overlaps) {\n     *     const otherObject = otherCollision.object;\n     *     console.log(`Collision with object ${otherObject.objectId}`);\n     * }\n     * ```\n     *\n     * @returns Collision components overlapping this collider.\n     */\n    queryOverlaps() {\n        const count = this.engine.wasm._wl_collision_component_query_overlaps(this._id, this.engine.wasm._tempMem, this.engine.wasm._tempMemSize >> 1);\n        const overlaps = new Array(count);\n        for (let i = 0; i < count; ++i) {\n            const id = this.engine.wasm._tempMemUint16[i];\n            overlaps[i] = this._scene._components.wrapCollision(id);\n        }\n        return overlaps;\n    }\n}\n__decorate([\n    nativeProperty()\n], CollisionComponent.prototype, \"collider\", null);\n__decorate([\n    nativeProperty()\n], CollisionComponent.prototype, \"extents\", null);\n__decorate([\n    nativeProperty()\n], CollisionComponent.prototype, \"group\", null);\n/**\n * Native text component\n *\n * Provides access to a native text component instance\n */\nexport class TextComponent extends Component {\n    /** @override */\n    static TypeName = 'text';\n    /** Text component alignment. */\n    get alignment() {\n        return this.engine.wasm._wl_text_component_get_horizontal_alignment(this._id);\n    }\n    /**\n     * Set text component alignment.\n     *\n     * @param alignment Alignment for the text component.\n     */\n    set alignment(alignment) {\n        this.engine.wasm._wl_text_component_set_horizontal_alignment(this._id, alignment);\n    }\n    /**\n     * Text component vertical alignment.\n     * @since 1.2.0\n     */\n    get verticalAlignment() {\n        return this.engine.wasm._wl_text_component_get_vertical_alignment(this._id);\n    }\n    /**\n     * Set text component vertical alignment.\n     *\n     * @param verticalAlignment Vertical for the text component.\n     * @since 1.2.0\n     */\n    set verticalAlignment(verticalAlignment) {\n        this.engine.wasm._wl_text_component_set_vertical_alignment(this._id, verticalAlignment);\n    }\n    /**\n     * Text component justification.\n     *\n     * @deprecated Please use {@link TextComponent.verticalAlignment} instead.\n     */\n    get justification() {\n        return this.verticalAlignment;\n    }\n    /**\n     * Set text component justification.\n     *\n     * @param justification Justification for the text component.\n     *\n     * @deprecated Please use {@link TextComponent.verticalAlignment} instead.\n     */\n    set justification(justification) {\n        this.verticalAlignment = justification;\n    }\n    /** Text component character spacing. */\n    get characterSpacing() {\n        return this.engine.wasm._wl_text_component_get_character_spacing(this._id);\n    }\n    /**\n     * Set text component character spacing.\n     *\n     * @param spacing Character spacing for the text component.\n     */\n    set characterSpacing(spacing) {\n        this.engine.wasm._wl_text_component_set_character_spacing(this._id, spacing);\n    }\n    /** Text component line spacing. */\n    get lineSpacing() {\n        return this.engine.wasm._wl_text_component_get_line_spacing(this._id);\n    }\n    /**\n     * Set text component line spacing\n     *\n     * @param spacing Line spacing for the text component\n     */\n    set lineSpacing(spacing) {\n        this.engine.wasm._wl_text_component_set_line_spacing(this._id, spacing);\n    }\n    /** Text component effect. */\n    get effect() {\n        return this.engine.wasm._wl_text_component_get_effect(this._id);\n    }\n    /**\n     * Set text component effect\n     *\n     * @param effect Effect for the text component\n     */\n    set effect(effect) {\n        this.engine.wasm._wl_text_component_set_effect(this._id, effect);\n    }\n    /** Text component text. */\n    get text() {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_text_component_get_text(this._id);\n        return wasm.UTF8ToString(ptr);\n    }\n    /**\n     * Set text component text.\n     *\n     * @param text Text of the text component.\n     */\n    set text(text) {\n        const wasm = this.engine.wasm;\n        wasm._wl_text_component_set_text(this._id, wasm.tempUTF8(text.toString()));\n    }\n    /**\n     * Set material to render the text with.\n     *\n     * @param material New material.\n     */\n    set material(material) {\n        const matIndex = material ? material._id : 0;\n        this.engine.wasm._wl_text_component_set_material(this._id, matIndex);\n    }\n    /** Material used to render the text. */\n    get material() {\n        const index = this.engine.wasm._wl_text_component_get_material(this._id);\n        return this.engine.materials.wrap(index);\n    }\n    /**\n     * Axis-aligned bounding box for a given text, in object space.\n     *\n     * To calculate the size for the currently set text, use\n     * {@link getBoundingBox}.\n     *\n     * Useful for calculating the text size before an update and potentially\n     * adjusting the text:\n     *\n     * ```js\n     * let updatedName = 'some very long name';\n     * const box = new Float32Array(4);\n     * text.getBoundingBoxForText(updatedName, box);\n     * const width = box[2] - box[0];\n     * if(width > 2.0) {\n     *     updatedName = updatedName.slice(0, 5) + '...';\n     * }\n     * text.text = updatedName;\n     * ```\n     *\n     * @param text Text string to calculate the bounding box for.\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * @returns Bounding box - left, bottom, right, top.\n     */\n    getBoundingBoxForText(text, out = new Float32Array(4)) {\n        const wasm = this.engine.wasm;\n        /* Offset by 4 floats, output is written to _tempMem */\n        const textPtr = wasm.tempUTF8(text, 4 * 4);\n        this.engine.wasm._wl_text_component_get_boundingBox(this._id, textPtr, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out;\n    }\n    /**\n     * Axis-aligned bounding box, in object space.\n     *\n     * The bounding box is computed using the current component properties\n     * that influence the position and size of the text. The bounding box is\n     * affected by alignment, spacing, effect type and the font set in the\n     * material.\n     *\n     * To calculate the size for a different text, use\n     * {@link getBoundingBoxForText}.\n     *\n     * Useful for adjusting text position or scaling:\n     *\n     * ```js\n     * const box = new Float32Array(4);\n     * text.getBoundingBox(box);\n     * const width = box[2] - box[0];\n     * // Make text 1m wide\n     * text.object.setScalingLocal([1/width, 1, 1]);\n     * ```\n     *\n     * @param text Text string to calculate the bounding box for.\n     * @param out Preallocated array to write into, to avoid garbage,\n     *     otherwise will allocate a new Float32Array.\n     *\n     * @returns Bounding box - left, bottom, right, top.\n     */\n    getBoundingBox(out = new Float32Array(4)) {\n        const wasm = this.engine.wasm;\n        this.engine.wasm._wl_text_component_get_boundingBox(this._id, 0, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out;\n    }\n}\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"alignment\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"verticalAlignment\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"justification\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"characterSpacing\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"lineSpacing\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"effect\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"text\", null);\n__decorate([\n    nativeProperty()\n], TextComponent.prototype, \"material\", null);\n/**\n * Native view component.\n *\n * Provides access to a native view component instance.\n */\nexport class ViewComponent extends Component {\n    /** @override */\n    static TypeName = 'view';\n    getProjectionMatrix(out = new Float32Array(16)) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_view_component_get_projection_matrix(this._id) / 4; /* Align F32 */\n        for (let i = 0; i < 16; ++i) {\n            out[i] = wasm.HEAPF32[ptr + i];\n        }\n        return out;\n    }\n    /**\n     * Equivalent to {@link ViewComponent.getProjectionMatrix}.\n     *\n     * @note Prefer to use {@link ViewComponent.getProjectionMatrix} for performance.\n     */\n    get projectionMatrix() {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_view_component_get_projection_matrix(this._id), 16);\n    }\n    /** ViewComponent near clipping plane value. */\n    get near() {\n        return this.engine.wasm._wl_view_component_get_near(this._id);\n    }\n    /**\n     * Set near clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param near Near depth value.\n     */\n    set near(near) {\n        this.engine.wasm._wl_view_component_set_near(this._id, near);\n    }\n    /** Far clipping plane value. */\n    get far() {\n        return this.engine.wasm._wl_view_component_get_far(this._id);\n    }\n    /**\n     * Set far clipping plane distance for the view.\n     *\n     * If an XR session is active, the change will apply in the\n     * following frame, otherwise the change is immediate.\n     *\n     * @param far Near depth value.\n     */\n    set far(far) {\n        this.engine.wasm._wl_view_component_set_far(this._id, far);\n    }\n    /**\n     * Get the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active, this returns the field of view reported by\n     * the device, regardless of the fov that was set.\n     */\n    get fov() {\n        return this.engine.wasm._wl_view_component_get_fov(this._id);\n    }\n    /**\n     * Set the horizontal field of view for the view, **in degrees**.\n     *\n     * If an XR session is active, the field of view reported by the device is\n     * used and this value is ignored. After the XR session ends, the new value\n     * is applied.\n     *\n     * @param fov Horizontal field of view, **in degrees**.\n     */\n    set fov(fov) {\n        this.engine.wasm._wl_view_component_set_fov(this._id, fov);\n    }\n}\n__decorate([\n    enumerable()\n], ViewComponent.prototype, \"projectionMatrix\", null);\n__decorate([\n    nativeProperty()\n], ViewComponent.prototype, \"near\", null);\n__decorate([\n    nativeProperty()\n], ViewComponent.prototype, \"far\", null);\n__decorate([\n    nativeProperty()\n], ViewComponent.prototype, \"fov\", null);\n/**\n * Native input component.\n *\n * Provides access to a native input component instance.\n */\nexport class InputComponent extends Component {\n    /** @override */\n    static TypeName = 'input';\n    /** Input component type */\n    get inputType() {\n        return this.engine.wasm._wl_input_component_get_type(this._id);\n    }\n    /**\n     * Set input component type.\n     *\n     * @params New input component type.\n     */\n    set inputType(type) {\n        this.engine.wasm._wl_input_component_set_type(this._id, type);\n    }\n    /**\n     * WebXR Device API input source associated with this input component,\n     * if type {@link InputType.ControllerLeft} or {@link InputType.ControllerRight}.\n     */\n    get xrInputSource() {\n        const xr = this.engine.xr;\n        if (!xr)\n            return null;\n        for (let inputSource of xr.session.inputSources) {\n            if (inputSource.handedness == this.handedness) {\n                return inputSource;\n            }\n        }\n        return null;\n    }\n    /**\n     * 'left', 'right' or `null` depending on the {@link InputComponent#inputType}.\n     */\n    get handedness() {\n        const inputType = this.inputType;\n        if (inputType == InputType.ControllerRight ||\n            inputType == InputType.RayRight ||\n            inputType == InputType.EyeRight)\n            return 'right';\n        if (inputType == InputType.ControllerLeft ||\n            inputType == InputType.RayLeft ||\n            inputType == InputType.EyeLeft)\n            return 'left';\n        return null;\n    }\n}\n__decorate([\n    nativeProperty()\n], InputComponent.prototype, \"inputType\", null);\n__decorate([\n    enumerable()\n], InputComponent.prototype, \"xrInputSource\", null);\n__decorate([\n    enumerable()\n], InputComponent.prototype, \"handedness\", null);\n/**\n * Native light component.\n *\n * Provides access to a native light component instance.\n */\nexport class LightComponent extends Component {\n    /** @override */\n    static TypeName = 'light';\n    getColor(out = new Float32Array(3)) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_light_component_get_color(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n    /**\n     * Set light color.\n     *\n     * @param c New color array/vector, expected to have at least 3 elements.\n     * @since 1.0.0\n     */\n    setColor(c) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_light_component_get_color(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = c[0];\n        wasm.HEAPF32[ptr + 1] = c[1];\n        wasm.HEAPF32[ptr + 2] = c[2];\n    }\n    /**\n     * View on the light color.\n     *\n     * @note Prefer to use {@link getColor} in performance-critical code.\n     */\n    get color() {\n        const wasm = this.engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_light_component_get_color(this._id), 3);\n    }\n    /**\n     * Set light color.\n     *\n     * @param c Color of the light component.\n     *\n     * @note Prefer to use {@link setColor} in performance-critical code.\n     */\n    set color(c) {\n        this.color.set(c);\n    }\n    /** Light type. */\n    get lightType() {\n        return this.engine.wasm._wl_light_component_get_type(this._id);\n    }\n    /**\n     * Set light type.\n     *\n     * @param lightType Type of the light component.\n     */\n    set lightType(t) {\n        this.engine.wasm._wl_light_component_set_type(this._id, t);\n    }\n    /**\n     * Light intensity.\n     * @since 1.0.0\n     */\n    get intensity() {\n        return this.engine.wasm._wl_light_component_get_intensity(this._id);\n    }\n    /**\n     * Set light intensity.\n     *\n     * @param intensity Intensity of the light component.\n     * @since 1.0.0\n     */\n    set intensity(intensity) {\n        this.engine.wasm._wl_light_component_set_intensity(this._id, intensity);\n    }\n    /**\n     * Outer angle for spot lights, in degrees.\n     * @since 1.0.0\n     */\n    get outerAngle() {\n        return this.engine.wasm._wl_light_component_get_outerAngle(this._id);\n    }\n    /**\n     * Set outer angle for spot lights.\n     *\n     * @param angle Outer angle, in degrees.\n     * @since 1.0.0\n     */\n    set outerAngle(angle) {\n        this.engine.wasm._wl_light_component_set_outerAngle(this._id, angle);\n    }\n    /**\n     * Inner angle for spot lights, in degrees.\n     * @since 1.0.0\n     */\n    get innerAngle() {\n        return this.engine.wasm._wl_light_component_get_innerAngle(this._id);\n    }\n    /**\n     * Set inner angle for spot lights.\n     *\n     * @param angle Inner angle, in degrees.\n     * @since 1.0.0\n     */\n    set innerAngle(angle) {\n        this.engine.wasm._wl_light_component_set_innerAngle(this._id, angle);\n    }\n    /**\n     * Whether the light casts shadows.\n     * @since 1.0.0\n     */\n    get shadows() {\n        return !!this.engine.wasm._wl_light_component_get_shadows(this._id);\n    }\n    /**\n     * Set whether the light casts shadows.\n     *\n     * @param b Whether the light casts shadows.\n     * @since 1.0.0\n     */\n    set shadows(b) {\n        this.engine.wasm._wl_light_component_set_shadows(this._id, b);\n    }\n    /**\n     * Range for shadows.\n     * @since 1.0.0\n     */\n    get shadowRange() {\n        return this.engine.wasm._wl_light_component_get_shadowRange(this._id);\n    }\n    /**\n     * Set range for shadows.\n     *\n     * @param range Range for shadows.\n     * @since 1.0.0\n     */\n    set shadowRange(range) {\n        this.engine.wasm._wl_light_component_set_shadowRange(this._id, range);\n    }\n    /**\n     * Bias value for shadows.\n     * @since 1.0.0\n     */\n    get shadowBias() {\n        return this.engine.wasm._wl_light_component_get_shadowBias(this._id);\n    }\n    /**\n     * Set bias value for shadows.\n     *\n     * @param bias Bias for shadows.\n     * @since 1.0.0\n     */\n    set shadowBias(bias) {\n        this.engine.wasm._wl_light_component_set_shadowBias(this._id, bias);\n    }\n    /**\n     * Normal bias value for shadows.\n     * @since 1.0.0\n     */\n    get shadowNormalBias() {\n        return this.engine.wasm._wl_light_component_get_shadowNormalBias(this._id);\n    }\n    /**\n     * Set normal bias value for shadows.\n     *\n     * @param bias Normal bias for shadows.\n     * @since 1.0.0\n     */\n    set shadowNormalBias(bias) {\n        this.engine.wasm._wl_light_component_set_shadowNormalBias(this._id, bias);\n    }\n    /**\n     * Texel size for shadows.\n     * @since 1.0.0\n     */\n    get shadowTexelSize() {\n        return this.engine.wasm._wl_light_component_get_shadowTexelSize(this._id);\n    }\n    /**\n     * Set texel size for shadows.\n     *\n     * @param size Texel size for shadows.\n     * @since 1.0.0\n     */\n    set shadowTexelSize(size) {\n        this.engine.wasm._wl_light_component_set_shadowTexelSize(this._id, size);\n    }\n    /**\n     * Cascade count for {@link LightType.Sun} shadows.\n     * @since 1.0.0\n     */\n    get cascadeCount() {\n        return this.engine.wasm._wl_light_component_get_cascadeCount(this._id);\n    }\n    /**\n     * Set cascade count for {@link LightType.Sun} shadows.\n     *\n     * @param count Cascade count.\n     * @since 1.0.0\n     */\n    set cascadeCount(count) {\n        this.engine.wasm._wl_light_component_set_cascadeCount(this._id, count);\n    }\n}\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"color\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"lightType\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"intensity\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"outerAngle\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"innerAngle\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"shadows\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"shadowRange\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"shadowBias\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"shadowNormalBias\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"shadowTexelSize\", null);\n__decorate([\n    nativeProperty()\n], LightComponent.prototype, \"cascadeCount\", null);\n/**\n * Native animation component.\n *\n * Provides access to a native animation component instance.\n */\nexport class AnimationComponent extends Component {\n    /** @override */\n    static TypeName = 'animation';\n    /**\n     * Emitter for animation events triggered on this component.\n     *\n     * The first argument is the name of the event.\n     */\n    onEvent = new Emitter();\n    /**\n     * Set animation to play.\n     *\n     * Make sure to {@link Animation#retarget} the animation to affect the\n     * right objects.\n     *\n     * @param anim Animation to play.\n     */\n    set animation(anim) {\n        this.scene.assertOrigin(anim);\n        this.engine.wasm._wl_animation_component_set_animation(this._id, anim ? anim._id : 0);\n    }\n    /** Animation set for this component */\n    get animation() {\n        const index = this.engine.wasm._wl_animation_component_get_animation(this._id);\n        return this._scene.animations.wrap(index);\n    }\n    /**\n     * Set play count. Set to `0` to loop indefinitely.\n     *\n     * @param playCount Number of times to repeat the animation.\n     */\n    set playCount(playCount) {\n        this.engine.wasm._wl_animation_component_set_playCount(this._id, playCount);\n    }\n    /** Number of times the animation is played. */\n    get playCount() {\n        return this.engine.wasm._wl_animation_component_get_playCount(this._id);\n    }\n    /**\n     * Set speed. Set to negative values to run the animation backwards.\n     *\n     * Setting speed has an immediate effect for the current frame's update\n     * and will continue with the speed from the current point in the animation.\n     *\n     * @param speed New speed at which to play the animation.\n     * @since 0.8.10\n     */\n    set speed(speed) {\n        this.engine.wasm._wl_animation_component_set_speed(this._id, speed);\n    }\n    /**\n     * Speed factor at which the animation is played.\n     *\n     * @since 0.8.10\n     */\n    get speed() {\n        return this.engine.wasm._wl_animation_component_get_speed(this._id);\n    }\n    /** Current playing state of the animation */\n    get state() {\n        return this.engine.wasm._wl_animation_component_state(this._id);\n    }\n    /**\n     * Play animation.\n     *\n     * If the animation is currently paused, resumes from that position. If the\n     * animation is already playing, does nothing.\n     *\n     * To restart the animation, {@link AnimationComponent#stop} it first.\n     */\n    play() {\n        this.engine.wasm._wl_animation_component_play(this._id);\n    }\n    /** Stop animation. */\n    stop() {\n        this.engine.wasm._wl_animation_component_stop(this._id);\n    }\n    /** Pause animation. */\n    pause() {\n        this.engine.wasm._wl_animation_component_pause(this._id);\n    }\n    /**\n     * Get the value of a float parameter in the attached graph.\n     * Throws if the parameter is missing.\n     *\n     * @param name Name of the parameter.\n     * @since 1.2.0\n     */\n    getFloatParameter(name) {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_animation_component_getGraphParamIndex(this._id, wasm.tempUTF8(name));\n        if (index === -1) {\n            throw Error(`Missing parameter '${name}'`);\n        }\n        wasm._wl_animation_component_getGraphParamValue(this._id, index, wasm._tempMem);\n        return wasm._tempMemFloat[0];\n    }\n    /**\n     * Set the value of a float parameter in the attached graph\n     * Throws if the parameter is missing.\n     *\n     * @param name Name of the parameter.\n     * @param value Float value to set.\n     * @returns 1 if the parameter was successfully set, 0 on fail.\n     * @since 1.2.0\n     */\n    setFloatParameter(name, value) {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_animation_component_getGraphParamIndex(this._id, wasm.tempUTF8(name));\n        if (index === -1) {\n            throw Error(`Missing parameter '${name}'`);\n        }\n        wasm._tempMemFloat[0] = value;\n        wasm._wl_animation_component_setGraphParamValue(this._id, index, wasm._tempMem);\n    }\n}\n__decorate([\n    nativeProperty()\n], AnimationComponent.prototype, \"animation\", null);\n__decorate([\n    nativeProperty()\n], AnimationComponent.prototype, \"playCount\", null);\n__decorate([\n    nativeProperty()\n], AnimationComponent.prototype, \"speed\", null);\n__decorate([\n    enumerable()\n], AnimationComponent.prototype, \"state\", null);\n/**\n * Native mesh component.\n *\n * Provides access to a native mesh component instance.\n */\nexport class MeshComponent extends Component {\n    /** @override */\n    static TypeName = 'mesh';\n    /**\n     * Set material to render the mesh with.\n     *\n     * @param material Material to render the mesh with.\n     */\n    set material(material) {\n        this.engine.wasm._wl_mesh_component_set_material(this._id, material ? material._id : 0);\n    }\n    /** Material used to render the mesh. */\n    get material() {\n        const index = this.engine.wasm._wl_mesh_component_get_material(this._id);\n        return this.engine.materials.wrap(index);\n    }\n    /** Mesh rendered by this component. */\n    get mesh() {\n        const index = this.engine.wasm._wl_mesh_component_get_mesh(this._id);\n        return this.engine.meshes.wrap(index);\n    }\n    /**\n     * Set mesh to rendered with this component.\n     *\n     * @param mesh Mesh rendered by this component.\n     */\n    set mesh(mesh) {\n        this.engine.wasm._wl_mesh_component_set_mesh(this._id, mesh?._id ?? 0);\n    }\n    /** Skin for this mesh component. */\n    get skin() {\n        const index = this.engine.wasm._wl_mesh_component_get_skin(this._id);\n        return this._scene.skins.wrap(index);\n    }\n    /**\n     * Set skin to transform this mesh component.\n     *\n     * @param skin Skin to use for rendering skinned meshes.\n     */\n    set skin(skin) {\n        this.scene.assertOrigin(skin);\n        this.engine.wasm._wl_mesh_component_set_skin(this._id, skin ? skin._id : 0);\n    }\n    /**\n     * Morph targets for this mesh component.\n     *\n     * @since 1.2.0\n     */\n    get morphTargets() {\n        const index = this.engine.wasm._wl_mesh_component_get_morph_targets(this._id);\n        return this.engine.morphTargets.wrap(index);\n    }\n    /**\n     * Set morph targets to transform this mesh component.\n     *\n     * @param morphTargets Morph targets to use for rendering.\n     *\n     * @since 1.2.0\n     */\n    set morphTargets(morphTargets) {\n        this.engine.wasm._wl_mesh_component_set_morph_targets(this._id, morphTargets?._id ?? 0);\n    }\n    /**\n     * Equivalent to {@link getMorphTargetWeights}.\n     *\n     * @note Prefer to use {@link getMorphTargetWeights} for performance.\n     *\n     * @since 1.2.0\n     */\n    get morphTargetWeights() {\n        return this.getMorphTargetWeights();\n    }\n    /**\n     * Set the morph target weights to transform this mesh component.\n     *\n     * @param weights New weights.\n     *\n     * @since 1.2.0\n     */\n    set morphTargetWeights(weights) {\n        this.setMorphTargetWeights(weights);\n    }\n    getMorphTargetWeights(out) {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_mesh_component_get_morph_target_weights(this._id, wasm._tempMem);\n        if (!out) {\n            out = new Float32Array(count);\n        }\n        for (let i = 0; i < count; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    }\n    /**\n     * Get the weight of a single morph target.\n     *\n     * @param target Index of the morph target.\n     * @returns The weight.\n     *\n     * @since 1.2.0\n     */\n    getMorphTargetWeight(target) {\n        const count = this.morphTargets?.count ?? 0;\n        if (target >= count) {\n            throw new Error(`Index ${target} is out of bounds for ${count} targets`);\n        }\n        return this.engine.wasm._wl_mesh_component_get_morph_target_weight(this._id, target);\n    }\n    /**\n     * Set morph target weights for this mesh component.\n     *\n     * @param weights Array of new weights, expected to have at least as many\n     *     elements as {@link MorphTargets.count}.\n     *\n     * @since 1.2.0\n     */\n    setMorphTargetWeights(weights) {\n        const count = this.morphTargets?.count ?? 0;\n        if (weights.length !== count) {\n            throw new Error(`Expected ${count} weights but got ${weights.length}`);\n        }\n        const wasm = this.engine.wasm;\n        wasm._tempMemFloat.set(weights);\n        wasm._wl_mesh_component_set_morph_target_weights(this._id, wasm._tempMem, weights.length);\n    }\n    /**\n     * Set the weight of a single morph target.\n     *\n     * @param target Index of the morph target.\n     * @param weight The new weight.\n     *\n     * ## Usage\n     *\n     * ```js\n     * const mesh = object.getComponent('mesh');\n     * const mouthTarget = mesh.morphTargets.getTargetIndex('mouth');\n     * mesh.setMorphTargetWeight(mouthTarget, 0.5);\n     * ```\n     *\n     * @since 1.2.0\n     */\n    setMorphTargetWeight(target, weight) {\n        const count = this.morphTargets?.count ?? 0;\n        if (target >= count) {\n            throw new Error(`Index ${target} is out of bounds for ${count} targets`);\n        }\n        this.engine.wasm._wl_mesh_component_set_morph_target_weight(this._id, target, weight);\n    }\n}\n__decorate([\n    nativeProperty()\n], MeshComponent.prototype, \"material\", null);\n__decorate([\n    nativeProperty()\n], MeshComponent.prototype, \"mesh\", null);\n__decorate([\n    nativeProperty()\n], MeshComponent.prototype, \"skin\", null);\n__decorate([\n    nativeProperty()\n], MeshComponent.prototype, \"morphTargets\", null);\n__decorate([\n    nativeProperty()\n], MeshComponent.prototype, \"morphTargetWeights\", null);\n/**\n * Enum for Physics axes locking\n *\n * See {@link PhysXComponent.angularLockAxis} and {@link PhysXComponent.linearLockAxis}.\n */\nexport var LockAxis;\n(function (LockAxis) {\n    /**\n     * No axis selected.\n     */\n    LockAxis[LockAxis[\"None\"] = 0] = \"None\";\n    /**\n     * **X axis**:\n     */\n    LockAxis[LockAxis[\"X\"] = 1] = \"X\";\n    /**\n     * **Y axis**:\n     */\n    LockAxis[LockAxis[\"Y\"] = 2] = \"Y\";\n    /**\n     * **Z axis**:\n     */\n    LockAxis[LockAxis[\"Z\"] = 4] = \"Z\";\n})(LockAxis || (LockAxis = {}));\n/**\n * Native physx rigid body component.\n *\n * Provides access to a native mesh component instance.\n * Only available when using physx enabled runtime, see \"Project Settings > Runtime\".\n */\nexport class PhysXComponent extends Component {\n    /** @override */\n    static TypeName = 'physx';\n    getTranslationOffset(out = new Float32Array(3)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_offsetTranslation(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    getRotationOffset(out = new Float32Array(4)) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_physx_component_get_offsetTransform(this._id) >> 2; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n    getExtents(out = new Float32Array(3)) {\n        const wasm = this.engine.wasm;\n        const ptr = wasm._wl_physx_component_get_extents(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n    getLinearVelocity(out = new Float32Array(3)) {\n        const wasm = this.engine.wasm;\n        const tempMemFloat = wasm._tempMemFloat;\n        wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem); /* Align F32 */\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        return out;\n    }\n    getAngularVelocity(out = new Float32Array(3)) {\n        const wasm = this.engine.wasm;\n        const tempMemFloat = wasm._tempMemFloat;\n        wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem); /* Align F32 */\n        out[0] = tempMemFloat[0];\n        out[1] = tempMemFloat[1];\n        out[2] = tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Set whether this rigid body is static.\n     *\n     * Setting this property only takes effect once the component\n     * switches from inactive to active.\n     *\n     * @param b Whether the rigid body should be static.\n     */\n    set static(b) {\n        this.engine.wasm._wl_physx_component_set_static(this._id, b);\n    }\n    /**\n     * Whether this rigid body is static.\n     *\n     * This property returns whether the rigid body is *effectively*\n     * static. If static property was set while the rigid body was\n     * active, it will not take effect until the rigid body is set\n     * inactive and active again. Until the component is set inactive,\n     * this getter will return whether the rigid body is actually\n     * static.\n     */\n    get static() {\n        return !!this.engine.wasm._wl_physx_component_get_static(this._id);\n    }\n    /**\n     * Equivalent to {@link PhysXComponent.getTranslationOffset}.\n     *\n     * Gives a quick view of the offset in a debugger.\n     *\n     * @note Prefer to use {@link PhysXComponent.getTranslationOffset} for performance.\n     *\n     * @since 1.1.1\n     */\n    get translationOffset() {\n        return this.getTranslationOffset();\n    }\n    /**\n     * Set the offset translation.\n     *\n     * The array must be a vector of at least **3** elements.\n     *\n     * @note The component must be re-activated to apply the change.\n     *\n     * @since 1.1.1\n     */\n    set translationOffset(offset) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_set_offsetTranslation(this._id, offset[0], offset[1], offset[2]);\n    }\n    /**\n     * Equivalent to {@link PhysXComponent.getRotationOffset}.\n     *\n     * Gives a quick view of the offset in a debugger.\n     *\n     * @note Prefer to use {@link PhysXComponent.getRotationOffset} for performance.\n     *\n     * @since 1.1.1\n     */\n    get rotationOffset() {\n        return this.getRotationOffset();\n    }\n    /**\n     * Set the offset rotation.\n     *\n     * The array must be a quaternion of at least **4** elements.\n     *\n     * @note The component must be re-activated to apply the change.\n     *\n     * @since 1.1.1\n     */\n    set rotationOffset(offset) {\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_set_offsetRotation(this._id, offset[0], offset[1], offset[2], offset[3]);\n    }\n    /**\n     * Set whether this rigid body is kinematic.\n     *\n     * @param b Whether the rigid body should be kinematic.\n     */\n    set kinematic(b) {\n        this.engine.wasm._wl_physx_component_set_kinematic(this._id, b);\n    }\n    /**\n     * Whether this rigid body is kinematic.\n     */\n    get kinematic() {\n        return !!this.engine.wasm._wl_physx_component_get_kinematic(this._id);\n    }\n    /**\n     * Set whether this rigid body's gravity is enabled.\n     *\n     * @param b Whether the rigid body's gravity should be enabled.\n     */\n    set gravity(b) {\n        this.engine.wasm._wl_physx_component_set_gravity(this._id, b);\n    }\n    /**\n     * Whether this rigid body's gravity flag is enabled.\n     */\n    get gravity() {\n        return !!this.engine.wasm._wl_physx_component_get_gravity(this._id);\n    }\n    /**\n     * Set whether this rigid body's simulate flag is enabled.\n     *\n     * @param b Whether the rigid body's simulate flag should be enabled.\n     */\n    set simulate(b) {\n        this.engine.wasm._wl_physx_component_set_simulate(this._id, b);\n    }\n    /**\n     * Whether this rigid body's simulate flag is enabled.\n     */\n    get simulate() {\n        return !!this.engine.wasm._wl_physx_component_get_simulate(this._id);\n    }\n    /**\n     * Set whether to allow simulation of this rigid body.\n     *\n     * {@link allowSimulation} and {@link trigger} can not be enabled at the\n     * same time. Enabling {@link allowSimulation} while {@link trigger} is enabled\n     * will disable {@link trigger}.\n     *\n     * @param b Whether to allow simulation of this rigid body.\n     */\n    set allowSimulation(b) {\n        this.engine.wasm._wl_physx_component_set_allowSimulation(this._id, b);\n    }\n    /**\n     * Whether to allow simulation of this rigid body.\n     */\n    get allowSimulation() {\n        return !!this.engine.wasm._wl_physx_component_get_allowSimulation(this._id);\n    }\n    /**\n     * Set whether this rigid body may be queried in ray casts.\n     *\n     * @param b Whether this rigid body may be queried in ray casts.\n     */\n    set allowQuery(b) {\n        this.engine.wasm._wl_physx_component_set_allowQuery(this._id, b);\n    }\n    /**\n     * Whether this rigid body may be queried in ray casts.\n     */\n    get allowQuery() {\n        return !!this.engine.wasm._wl_physx_component_get_allowQuery(this._id);\n    }\n    /**\n     * Set whether this physics body is a trigger.\n     *\n     * {@link allowSimulation} and {@link trigger} can not be enabled at the\n     * same time. Enabling trigger while {@link allowSimulation} is enabled,\n     * will disable {@link allowSimulation}.\n     *\n     * @param b Whether this physics body is a trigger.\n     */\n    set trigger(b) {\n        this.engine.wasm._wl_physx_component_set_trigger(this._id, b);\n    }\n    /**\n     * Whether this physics body is a trigger.\n     */\n    get trigger() {\n        return !!this.engine.wasm._wl_physx_component_get_trigger(this._id);\n    }\n    /**\n     * Set the shape for collision detection.\n     *\n     * @param s New shape.\n     * @since 0.8.5\n     */\n    set shape(s) {\n        this.engine.wasm._wl_physx_component_set_shape(this._id, s);\n    }\n    /** The shape for collision detection. */\n    get shape() {\n        return this.engine.wasm._wl_physx_component_get_shape(this._id);\n    }\n    /**\n     * Set additional data for the shape.\n     *\n     * Retrieved only from {@link PhysXComponent#shapeData}.\n     * @since 0.8.10\n     */\n    set shapeData(d) {\n        if (d == null || !isMeshShape(this.shape))\n            return;\n        this.engine.wasm._wl_physx_component_set_shape_data(this._id, d.index);\n    }\n    /**\n     * Additional data for the shape.\n     *\n     * `null` for {@link Shape} values: `None`, `Sphere`, `Capsule`, `Box`, `Plane`.\n     * `{index: n}` for `TriangleMesh` and `ConvexHull`.\n     *\n     * This data is currently only for passing onto or creating other {@link PhysXComponent}.\n     * @since 0.8.10\n     */\n    get shapeData() {\n        if (!isMeshShape(this.shape))\n            return null;\n        return {\n            index: this.engine.wasm._wl_physx_component_get_shape_data(this._id),\n        };\n    }\n    /**\n     * Set the shape extents for collision detection.\n     *\n     * @param e New extents for the shape.\n     * @since 0.8.5\n     */\n    set extents(e) {\n        this.extents.set(e);\n    }\n    /**\n     * Equivalent to {@link PhysXComponent.getExtents}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getExtents} for performance.\n     */\n    get extents() {\n        const wasm = this.engine.wasm;\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const ptr = wasm._wl_physx_component_get_extents(this._id);\n        return new Float32Array(wasm.HEAPF32.buffer, ptr, 3);\n    }\n    /**\n     * Get staticFriction.\n     */\n    get staticFriction() {\n        return this.engine.wasm._wl_physx_component_get_staticFriction(this._id);\n    }\n    /**\n     * Set staticFriction.\n     * @param v New staticFriction.\n     */\n    set staticFriction(v) {\n        this.engine.wasm._wl_physx_component_set_staticFriction(this._id, v);\n    }\n    /**\n     * Get dynamicFriction.\n     */\n    get dynamicFriction() {\n        return this.engine.wasm._wl_physx_component_get_dynamicFriction(this._id);\n    }\n    /**\n     * Set dynamicFriction\n     * @param v New dynamicDamping.\n     */\n    set dynamicFriction(v) {\n        this.engine.wasm._wl_physx_component_set_dynamicFriction(this._id, v);\n    }\n    /**\n     * Get bounciness.\n     * @since 0.9.0\n     */\n    get bounciness() {\n        return this.engine.wasm._wl_physx_component_get_bounciness(this._id);\n    }\n    /**\n     * Set bounciness.\n     * @param v New bounciness.\n     * @since 0.9.0\n     */\n    set bounciness(v) {\n        this.engine.wasm._wl_physx_component_set_bounciness(this._id, v);\n    }\n    /**\n     * Get linearDamping/\n     */\n    get linearDamping() {\n        return this.engine.wasm._wl_physx_component_get_linearDamping(this._id);\n    }\n    /**\n     * Set linearDamping.\n     * @param v New linearDamping.\n     */\n    set linearDamping(v) {\n        this.engine.wasm._wl_physx_component_set_linearDamping(this._id, v);\n    }\n    /** Get angularDamping. */\n    get angularDamping() {\n        return this.engine.wasm._wl_physx_component_get_angularDamping(this._id);\n    }\n    /**\n     * Set angularDamping.\n     * @param v New angularDamping.\n     */\n    set angularDamping(v) {\n        this.engine.wasm._wl_physx_component_set_angularDamping(this._id, v);\n    }\n    /**\n     * Set linear velocity.\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New linear velocity.\n     */\n    set linearVelocity(v) {\n        this.engine.wasm._wl_physx_component_set_linearVelocity(this._id, v[0], v[1], v[2]);\n    }\n    /**\n     * Equivalent to {@link PhysXComponent.getLinearVelocity}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getLinearVelocity} for performance.\n     */\n    get linearVelocity() {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_linearVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n    /**\n     * Set angular velocity\n     *\n     * [PhysX Manual - \"Velocity\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#velocity)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New angular velocity\n     */\n    set angularVelocity(v) {\n        this.engine.wasm._wl_physx_component_set_angularVelocity(this._id, v[0], v[1], v[2]);\n    }\n    /**\n     * Equivalent to {@link PhysXComponent.getAngularVelocity}.\n     *\n     * @note Prefer to use {@link PhysXComponent.getAngularVelocity} for performance.\n     */\n    get angularVelocity() {\n        /** @todo: Break at 2.0.0. Do not allow modifying memory in-place. */\n        const wasm = this.engine.wasm;\n        wasm._wl_physx_component_get_angularVelocity(this._id, wasm._tempMem);\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._tempMem, 3);\n    }\n    /**\n     * Set the components groups mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set groupsMask(flags) {\n        this.engine.wasm._wl_physx_component_set_groupsMask(this._id, flags);\n    }\n    /**\n     * Get the components groups mask flags.\n     *\n     * Each bit represents membership to group, see example.\n     *\n     * ```js\n     * // Assign c to group 2\n     * c.groupsMask = (1 << 2);\n     *\n     * // Assign c to group 0\n     * c.groupsMask  = (1 << 0);\n     *\n     * // Assign c to group 0 and 2\n     * c.groupsMask = (1 << 0) | (1 << 2);\n     *\n     * (c.groupsMask & (1 << 2)) != 0; // true\n     * (c.groupsMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    get groupsMask() {\n        return this.engine.wasm._wl_physx_component_get_groupsMask(this._id);\n    }\n    /**\n     * Set the components blocks mask.\n     *\n     * @param flags New flags that need to be set.\n     */\n    set blocksMask(flags) {\n        this.engine.wasm._wl_physx_component_set_blocksMask(this._id, flags);\n    }\n    /**\n     * Get the components blocks mask flags.\n     *\n     * Each bit represents membership to the block, see example.\n     *\n     * ```js\n     * // Block overlap with any objects in group 2\n     * c.blocksMask = (1 << 2);\n     *\n     * // Block overlap with any objects in group 0\n     * c.blocksMask  = (1 << 0)\n     *\n     * // Block overlap with any objects in group 0 and 2\n     * c.blocksMask = (1 << 0) | (1 << 2);\n     *\n     * (c.blocksMask & (1 << 2)) != 0; // true\n     * (c.blocksMask & (1 << 7)) != 0; // false\n     * ```\n     */\n    get blocksMask() {\n        return this.engine.wasm._wl_physx_component_get_blocksMask(this._id);\n    }\n    /**\n     * Set axes to lock for linear velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * Combine flags with Bitwise OR:\n     *\n     * ```js\n     * body.linearLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.linearLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set linearLockAxis(lock) {\n        this.engine.wasm._wl_physx_component_set_linearLockAxis(this._id, lock);\n    }\n    /**\n     * Get the linear lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed.\n     *\n     * ```js\n     * if(body.linearLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for linear movement.\n     */\n    get linearLockAxis() {\n        return this.engine.wasm._wl_physx_component_get_linearLockAxis(this._id);\n    }\n    /**\n     * Set axes to lock for angular velocity.\n     *\n     * @param lock The Axis that needs to be set.\n     *\n     * ```js\n     * body.angularLockAxis = LockAxis.X | LockAxis.Y; // x and y set\n     * body.angularLockAxis = LockAxis.X; // y unset\n     * ```\n     *\n     * @note This has no effect if the component is static.\n     */\n    set angularLockAxis(lock) {\n        this.engine.wasm._wl_physx_component_set_angularLockAxis(this._id, lock);\n    }\n    /**\n     * Get the angular lock axes flags.\n     *\n     * To get the state of a specific flag, Bitwise AND with the LockAxis needed:\n     *\n     * ```js\n     * if(body.angularLockAxis & LockAxis.Y) {\n     *     console.log(\"The Y flag was set!\");\n     * }\n     * ```\n     *\n     * @return axes that are currently locked for angular movement.\n     */\n    get angularLockAxis() {\n        return this.engine.wasm._wl_physx_component_get_angularLockAxis(this._id);\n    }\n    /**\n     * Set mass.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * @param m New mass.\n     */\n    set mass(m) {\n        this.engine.wasm._wl_physx_component_set_mass(this._id, m);\n    }\n    /** Mass */\n    get mass() {\n        return this.engine.wasm._wl_physx_component_get_mass(this._id);\n    }\n    /**\n     * Set mass space interia tensor.\n     *\n     * [PhysX Manual - \"Mass Properties\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#mass-properties)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param v New mass space interatia tensor.\n     */\n    set massSpaceInteriaTensor(v) {\n        this.engine.wasm._wl_physx_component_set_massSpaceInertiaTensor(this._id, v[0], v[1], v[2]);\n    }\n    /**\n     * Set the rigid body to sleep upon activation.\n     *\n     * When asleep, the rigid body will not be simulated until the next contact.\n     *\n     * @param flag `true` to sleep upon activation.\n     *\n     * @since 1.1.5\n     */\n    set sleepOnActivate(flag) {\n        this.engine.wasm._wl_physx_component_set_sleepOnActivate(this._id, flag);\n    }\n    /**\n     * `true` if the rigid body is set to sleep upon activation, `false` otherwise.\n     *\n     * @since 1.1.5\n     */\n    get sleepOnActivate() {\n        return !!this.engine.wasm._wl_physx_component_get_sleepOnActivate(this._id);\n    }\n    /**\n     * Apply a force.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     * @param localForce Whether the force vector is in local space, default `false`.\n     * @param p Position to apply force at, default is center of mass.\n     * @param local Whether position is in local space, default `false`.\n     */\n    addForce(f, m = ForceMode.Force, localForce = false, p, local = false) {\n        const wasm = this.engine.wasm;\n        if (!p) {\n            wasm._wl_physx_component_addForce(this._id, f[0], f[1], f[2], m, localForce);\n            return;\n        }\n        wasm._wl_physx_component_addForceAt(this._id, f[0], f[1], f[2], m, localForce, p[0], p[1], p[2], local);\n    }\n    /**\n     * Apply torque.\n     *\n     * [PhysX Manual - \"Applying Forces and Torques\"](https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Manual/RigidBodyDynamics.html#applying-forces-and-torques)\n     *\n     * Has no effect, if the component is not active.\n     *\n     * @param f Force vector.\n     * @param m Force mode, see {@link ForceMode}, default `Force`.\n     */\n    addTorque(f, m = ForceMode.Force) {\n        this.engine.wasm._wl_physx_component_addTorque(this._id, f[0], f[1], f[2], m);\n    }\n    /**\n     * Add on collision callback.\n     *\n     * @param callback Function to call when this rigid body (un)collides with any other.\n     *\n     * ```js\n     *  let rigidBody = this.object.getComponent('physx');\n     *  rigidBody.onCollision(function(type, other) {\n     *      // Ignore uncollides\n     *      if(type == CollisionEventType.TouchLost) return;\n     *\n     *      // Take damage on collision with enemies\n     *      if(other.object.name.startsWith(\"enemy-\")) {\n     *          this.applyDamage(10);\n     *      }\n     *  }.bind(this));\n     * ```\n     *\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollision(callback) {\n        return this.onCollisionWith(this, callback);\n    }\n    /**\n     * Add filtered on collision callback.\n     *\n     * @param otherComp Component for which callbacks will\n     *        be triggered. If you pass this component, the method is equivalent to.\n     *        {@link PhysXComponent#onCollision}.\n     * @param callback Function to call when this rigid body\n     *        (un)collides with `otherComp`.\n     * @returns Id of the new callback for use with {@link PhysXComponent#removeCollisionCallback}.\n     */\n    onCollisionWith(otherComp, callback) {\n        const physics = this.engine.physics;\n        physics._callbacks[this._id] = physics._callbacks[this._id] || [];\n        physics._callbacks[this._id].push(callback);\n        return this.engine.wasm._wl_physx_component_addCallback(this._id, otherComp._id || this._id);\n    }\n    /**\n     * Remove a collision callback added with {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     *\n     * @param callbackId Callback id as returned by {@link PhysXComponent#onCollision} or {@link PhysXComponent#onCollisionWith}.\n     * @throws When the callback does not belong to the component.\n     * @throws When the callback does not exist.\n     */\n    removeCollisionCallback(callbackId) {\n        const physics = this.engine.physics;\n        const r = this.engine.wasm._wl_physx_component_removeCallback(this._id, callbackId);\n        /* r is the amount of object to remove from the end of the\n         * callbacks array for this object */\n        if (r)\n            physics._callbacks[this._id].splice(-r);\n    }\n}\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"static\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"translationOffset\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"rotationOffset\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"kinematic\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"gravity\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"simulate\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"allowSimulation\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"allowQuery\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"trigger\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"shape\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"shapeData\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"extents\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"staticFriction\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"dynamicFriction\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"bounciness\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"linearDamping\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"angularDamping\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"linearVelocity\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"angularVelocity\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"groupsMask\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"blocksMask\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"linearLockAxis\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"angularLockAxis\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"mass\", null);\n__decorate([\n    nativeProperty()\n], PhysXComponent.prototype, \"sleepOnActivate\", null);\n/**\n * Access to the physics scene\n */\nexport class Physics {\n    /**\n     * @hidden\n     *\n     * **Note**: This is public to emulate a `friend` accessor.\n     */\n    _callbacks;\n    /** Hit. */\n    _hit;\n    /** Wonderland Engine instance */\n    _engine;\n    /** Ray Hit */\n    _rayHit;\n    constructor(engine) {\n        this._engine = engine;\n        this._rayHit = engine.wasm._malloc(4 * (3 * 4 + 3 * 4 + 4 + 2) + 4);\n        this._hit = new RayHit(engine.scene, this._rayHit);\n        this._callbacks = {};\n    }\n    /**\n     * Cast a ray through the scene and find intersecting physics components.\n     *\n     * The resulting ray hit will contain **up to 4** closest ray hits,\n     * sorted by increasing distance.\n     *\n     * Example:\n     *\n     * ```js\n     * const hit = engine.physics.rayCast(\n     *     [0, 0, 0],\n     *     [0, 0, 1],\n     *     1 << 0 | 1 << 4, // Only check against physics components in groups 0 and 4\n     *     25\n     * );\n     * if (hit.hitCount > 0) {\n     *     const locations = hit.getLocations();\n     *     console.log(`Object hit at: ${locations[0][0]}, ${locations[0][1]}, ${locations[0][2]}`);\n     * }\n     * ```\n     *\n     * @param o Ray origin.\n     * @param d Ray direction.\n     * @param groupMask Bitmask of physics groups to filter by: only objects\n     *        that are part of given groups are considered for the raycast.\n     * @param maxDistance Maximum **inclusive** hit distance. Defaults to `100`.\n     *\n     * @returns The {@link RayHit} instance, cached by this class.\n     *\n     * @note The returned {@link RayHit} object is owned by the {@link Physics}\n     *       instance and will be reused with the next {@link Physics#rayCast} call.\n     */\n    rayCast(o, d, groupMask, maxDistance = 100.0) {\n        const scene = this._engine.scene._index;\n        this._engine.wasm._wl_physx_ray_cast(scene, o[0], o[1], o[2], d[0], d[1], d[2], groupMask, maxDistance, this._rayHit);\n        return this._hit;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n/**\n * Mesh index type.\n */\nexport var MeshIndexType;\n(function (MeshIndexType) {\n    /** Single byte mesh index, range 0-255 */\n    MeshIndexType[MeshIndexType[\"UnsignedByte\"] = 1] = \"UnsignedByte\";\n    /** Two byte mesh index, range 0-65535 */\n    MeshIndexType[MeshIndexType[\"UnsignedShort\"] = 2] = \"UnsignedShort\";\n    /** Four byte mesh index, range 0-4294967295 */\n    MeshIndexType[MeshIndexType[\"UnsignedInt\"] = 4] = \"UnsignedInt\";\n})(MeshIndexType || (MeshIndexType = {}));\n/**\n * Mesh skinning type.\n */\nexport var MeshSkinningType;\n(function (MeshSkinningType) {\n    /** Not skinned */\n    MeshSkinningType[MeshSkinningType[\"None\"] = 0] = \"None\";\n    /** Skinned, 4 joints/weight per vertex */\n    MeshSkinningType[MeshSkinningType[\"FourJoints\"] = 1] = \"FourJoints\";\n    /** Skinned, 8 joints/weight per vertex */\n    MeshSkinningType[MeshSkinningType[\"EightJoints\"] = 2] = \"EightJoints\";\n})(MeshSkinningType || (MeshSkinningType = {}));\n/**\n * Wrapper around a native mesh data.\n *\n * For more information about how to create meshes, have a look at the\n * {@link MeshManager} class.\n *\n * #### Update\n *\n * To modify a mesh, you get access to a {@link MeshAttributeAccessor} that\n * allows you to modify the content of the buffers:\n *\n * Usage:\n *\n * ```js\n * const mesh = engine.es.create({vertexCount: 3, indexData: [0, 1, 2]});\n * const positions = mesh.attribute(MeshAttribute.Position);\n * ...\n * ```\n *\n * @note Meshes are **per-engine**, they can thus be shared by multiple scenes.\n */\nexport class Mesh extends Resource {\n    /**\n     * @deprecated Use {@link MeshManager.create} instead, accessible via {@link WonderlandEngine.meshes}:\n     *\n     * ```js\n     * const mesh = engine.meshes.create({vertexCount: 3, indexData: [0, 1, 2]});\n     * ...\n     * mesh.update();\n     * ```\n     */\n    constructor(engine, params) {\n        if (!isNumber(params)) {\n            const mesh = engine.meshes.create(params);\n            /* `super()` must be called as stated in the specification */\n            super(engine, mesh._index);\n            return mesh;\n        }\n        super(engine, params);\n    }\n    /** Number of vertices in this mesh. */\n    get vertexCount() {\n        return this.engine.wasm._wl_mesh_get_vertexCount(this._id);\n    }\n    /** Index data (read-only) or `null` if the mesh is not indexed. */\n    get indexData() {\n        const wasm = this.engine.wasm;\n        const tempMem = wasm._tempMem;\n        const ptr = wasm._wl_mesh_get_indexData(this._id, tempMem, tempMem + 4);\n        if (ptr === null)\n            return null;\n        const indexCount = wasm.HEAPU32[tempMem / 4];\n        const indexSize = wasm.HEAPU32[tempMem / 4 + 1];\n        switch (indexSize) {\n            case MeshIndexType.UnsignedByte:\n                return new Uint8Array(wasm.HEAPU8.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedShort:\n                return new Uint16Array(wasm.HEAPU16.buffer, ptr, indexCount);\n            case MeshIndexType.UnsignedInt:\n                return new Uint32Array(wasm.HEAPU32.buffer, ptr, indexCount);\n        }\n        return null;\n    }\n    /**\n     * Apply changes to {@link attribute | vertex attributes}.\n     *\n     * Uploads the updated vertex attributes to the GPU and updates the bounding\n     * sphere to match the new vertex positions.\n     *\n     * Since this is an expensive operation, call it only once you have performed\n     * all modifications on a mesh and avoid calling if you did not perform any\n     * modifications at all.\n     */\n    update() {\n        this.engine.wasm._wl_mesh_update(this._id);\n    }\n    getBoundingSphere(out = new Float32Array(4)) {\n        const wasm = this.engine.wasm;\n        this.engine.wasm._wl_mesh_get_boundingSphere(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        return out;\n    }\n    attribute(attr) {\n        if (typeof attr != 'number')\n            throw new TypeError('Expected number, but got ' + typeof attr);\n        const wasm = this.engine.wasm;\n        const tempMemUint32 = wasm._tempMemUint32;\n        wasm._wl_mesh_get_attribute(this._id, attr, wasm._tempMem);\n        if (tempMemUint32[0] == 255)\n            return null;\n        const arraySize = tempMemUint32[5];\n        return new MeshAttributeAccessor(this.engine, {\n            attribute: tempMemUint32[0],\n            offset: tempMemUint32[1],\n            stride: tempMemUint32[2],\n            formatSize: tempMemUint32[3],\n            componentCount: tempMemUint32[4],\n            /* The WASM API returns `0` for a scalar value. We clamp it to 1 as we strictly use it as a multiplier for get/set operations */\n            arraySize: arraySize ? arraySize : 1,\n            length: this.vertexCount,\n            bufferType: (attr !== MeshAttribute.JointId\n                ? Float32Array\n                : Uint16Array),\n        });\n    }\n    /**\n     * Destroy and free the meshes memory.\n     *\n     * It is best practice to set the mesh variable to `null` after calling\n     * destroy to prevent accidental use:\n     *\n     * ```js\n     *   mesh.destroy();\n     *   mesh = null;\n     * ```\n     *\n     * Accessing the mesh after destruction behaves like accessing an empty\n     * mesh.\n     *\n     * @since 0.9.0\n     */\n    destroy() {\n        this.engine.wasm._wl_mesh_destroy(this._id);\n        this.engine.meshes._destroy(this);\n    }\n    /** @overload */\n    toString() {\n        if (this.isDestroyed) {\n            return 'Mesh(destroyed)';\n        }\n        return `Mesh(${this._index})`;\n    }\n}\n/**\n * An iterator over a mesh vertex attribute.\n *\n * Usage:\n *\n * ```js\n * const mesh = this.object.getComponent('mesh').mesh;\n * const positions = mesh.attribute(MeshAttribute.Position);\n *\n * // Equivalent to `new Float32Array(3)`.\n * const temp = positions.createArray();\n *\n * for(let i = 0; i < positions.length; ++i) {\n *     // `pos` will reference `temp` and thereby not allocate additional\n *     // memory, which would cause a perf spike when collected.\n *     const pos = positions.get(i, temp);\n *     // Scale position by 2 on x-axis only.\n *     pos[0] *= 2.0;\n *     positions.set(i, pos);\n * }\n * // We're done modifying, tell the engine to move vertex data to the GPU.\n * mesh.update();\n * ```\n */\nexport class MeshAttributeAccessor {\n    /** Max number of elements. */\n    length = 0;\n    /** Wonderland Engine instance. @hidden */\n    _engine;\n    /** Attribute index. @hidden */\n    _attribute = -1;\n    /** Attribute offset. @hidden */\n    _offset = 0;\n    /** Attribute stride. @hidden */\n    _stride = 0;\n    /** Format size native enum. @hidden */\n    _formatSize = 0;\n    /** Number of components per vertex. @hidden */\n    _componentCount = 0;\n    /** Number of values per vertex. @hidden */\n    _arraySize = 1;\n    /**\n     * Class to instantiate an ArrayBuffer to get/set values.\n     */\n    _bufferType;\n    /**\n     * Function to allocate temporary WASM memory. It is cached in the accessor to avoid\n     * conditionals during get/set.\n     */\n    _tempBufferGetter;\n    /**\n     * Create a new instance.\n     *\n     * @note Please use {@link Mesh.attribute} to create a new instance.\n     *\n     * @param options Contains information about how to read the data.\n     * @note Do not use this constructor. Instead, please use the {@link Mesh.attribute} method.\n     *\n     * @hidden\n     */\n    constructor(engine, options) {\n        this._engine = engine;\n        const wasm = this._engine.wasm;\n        this._attribute = options.attribute;\n        this._offset = options.offset;\n        this._stride = options.stride;\n        this._formatSize = options.formatSize;\n        this._componentCount = options.componentCount;\n        this._arraySize = options.arraySize;\n        this._bufferType = options.bufferType;\n        this.length = options.length;\n        this._tempBufferGetter = (this._bufferType === Float32Array\n            ? wasm.getTempBufferF32.bind(wasm)\n            : wasm.getTempBufferU16.bind(wasm));\n    }\n    /**\n     * Create a new TypedArray to hold this attribute's values.\n     *\n     * This method is useful to create a view to hold the data to\n     * pass to {@link get} and {@link set}\n     *\n     * Example:\n     *\n     * ```js\n     * const vertexCount = 4;\n     * const positionAttribute = mesh.attribute(MeshAttribute.Position);\n     *\n     * // A position has 3 floats per vertex. Thus, positions has length 3 * 4.\n     * const positions = positionAttribute.createArray(vertexCount);\n     * ```\n     *\n     * @param count The number of **vertices** expected.\n     * @returns A TypedArray with the appropriate format to access the data\n     */\n    createArray(count = 1) {\n        count = count > this.length ? this.length : count;\n        return new this._bufferType(count * this._componentCount * this._arraySize);\n    }\n    get(index, out = this.createArray()) {\n        if (out.length % this._componentCount !== 0) {\n            throw new Error(`out.length, ${out.length} is not a multiple of the attribute vector components, ${this._componentCount}`);\n        }\n        const dest = this._tempBufferGetter(out.length);\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const destSize = elementSize * out.length;\n        const srcFormatSize = this._formatSize * this._arraySize;\n        const destFormatSize = this._componentCount * elementSize * this._arraySize;\n        this._engine.wasm._wl_mesh_get_attribute_values(this._attribute, srcFormatSize, this._offset + index * this._stride, this._stride, destFormatSize, dest.byteOffset, destSize);\n        for (let i = 0; i < out.length; ++i)\n            out[i] = dest[i];\n        return out;\n    }\n    /**\n     * Set attribute element.\n     *\n     * @param i Index\n     * @param v Value to set the element to\n     *\n     * `v.length` needs to be a multiple of the attributes component count, see\n     * {@link MeshAttribute}. If `v.length` is more than one multiple, it will be\n     * filled with the next n attribute elements, which can reduce overhead\n     * of this call.\n     *\n     * @returns Reference to self (for method chaining)\n     */\n    set(i, v) {\n        if (v.length % this._componentCount !== 0)\n            throw new Error(`out.length, ${v.length} is not a multiple of the attribute vector components, ${this._componentCount}`);\n        const elementSize = this._bufferType.BYTES_PER_ELEMENT;\n        const srcSize = elementSize * v.length;\n        const srcFormatSize = this._componentCount * elementSize * this._arraySize;\n        const destFormatSize = this._formatSize * this._arraySize;\n        const wasm = this._engine.wasm;\n        /* Unless we are already working with data from WASM heap, we\n         * need to copy into temporary memory. */\n        if (v.buffer != wasm.HEAPU8.buffer) {\n            const dest = this._tempBufferGetter(v.length);\n            dest.set(v);\n            v = dest;\n        }\n        wasm._wl_mesh_set_attribute_values(this._attribute, srcFormatSize, v.byteOffset, srcSize, destFormatSize, this._offset + i * this._stride, this._stride);\n        return this;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n/**\n * Wrapper around a native font resource.\n *\n * @note Fonts are **per-engine**, they can thus be shared by multiple scenes.\n *\n * @since 1.2.0\n */\nexport class Font extends Resource {\n    /** Em height in object space. Equivalent to line height. */\n    get emHeight() {\n        return this.engine.wasm._wl_font_get_emHeight(this._id);\n    }\n    /**\n     * Cap height in object space. This is the typical height of capital\n     * letters. Can be 0 if not defined by the font.\n     */\n    get capHeight() {\n        return this.engine.wasm._wl_font_get_capHeight(this._id);\n    }\n    /**\n     * X height in object space. This is the typical height of lowercase\n     * letters. Can be 0 if not defined by the font.\n     */\n    get xHeight() {\n        return this.engine.wasm._wl_font_get_xHeight(this._id);\n    }\n}\n/** Temporary canvas */\nlet temp2d = null;\n/**\n * Wrapper around a native texture data.\n *\n * For more information about how to create meshes, have a look at the\n * {@link TextureManager} class.\n *\n * @note Textures are **per-engine**, they can thus be shared by multiple scenes.\n */\nexport class Texture extends Resource {\n    /**\n     * @deprecated Use {@link TextureManager.create} instead, accessible via\n     * {@link WonderlandEngine.textures}:\n     *\n     * ```js\n     * const image = new Image();\n     * image.onload = () => {\n     *     const texture = engine.textures.create(image);\n     * };\n     * ```\n     */\n    constructor(engine, param) {\n        if (isImageLike(param)) {\n            const texture = engine.textures.create(param);\n            /* `super()` must be called as stated in the specification */\n            super(engine, texture._index);\n            return texture;\n        }\n        super(engine, param);\n    }\n    /**\n     * Whether this texture is valid\n     *\n     * @deprecated Use {@link SceneResource#isDestroyed} instead.\n     */\n    get valid() {\n        return !this.isDestroyed;\n    }\n    /**\n     * Index in this manager.\n     *\n     * @deprecated Use {@link Texture.index} instead.\n     */\n    get id() {\n        return this.index;\n    }\n    /** Update the texture to match the HTML element (e.g. reflect the current frame of a video). */\n    update() {\n        const image = this._imageIndex;\n        if (!this.valid || !image)\n            return;\n        this.engine.wasm._wl_renderer_updateImage(image);\n    }\n    /** Width of the texture. */\n    get width() {\n        /* HTML textures should be read directly from js, since the C++ could be\n         * one frame out-of-sync on the size of the element itself. */\n        const element = this.htmlElement;\n        if (element)\n            return element.width;\n        const wasm = this.engine.wasm;\n        wasm._wl_image_size(this._imageIndex, wasm._tempMem);\n        return wasm._tempMemUint32[0];\n    }\n    /** Height of the texture. */\n    get height() {\n        /* HTML textures should be read directly from js, since the C++ could be\n         * one frame out-of-sync on the size of the element itself. */\n        const element = this.htmlElement;\n        if (element)\n            return element.height;\n        const wasm = this.engine.wasm;\n        wasm._wl_image_size(this._imageIndex, wasm._tempMem);\n        return wasm._tempMemUint32[1];\n    }\n    /**\n     * Returns the html element associated to this texture.\n     *\n     * @note This accessor will return `null` if the image is compressed.\n     */\n    get htmlElement() {\n        const image = this._imageIndex;\n        if (!image)\n            return null;\n        const wasm = this.engine.wasm;\n        const jsImageIndex = wasm._wl_image_get_jsImage_index(image);\n        /* Since the first element is `null`, no need to check for `jsImageIndex` */\n        return wasm._images[jsImageIndex];\n    }\n    /**\n     * Update a subrange on the texture to match the HTML element (e.g. reflect the current frame of a video).\n     *\n     * Usage:\n     *\n     * ```js\n     * // Copies rectangle of pixel starting from (10, 20)\n     * texture.updateSubImage(10, 20, 600, 400);\n     * ```\n     *\n     * @param x x offset\n     * @param y y offset\n     * @param w width\n     * @param h height\n     */\n    updateSubImage(x, y, w, h) {\n        if (this.isDestroyed)\n            return;\n        const image = this._imageIndex;\n        if (!image)\n            return;\n        const wasm = this.engine.wasm;\n        const jsImageIndex = wasm._wl_image_get_jsImage_index(image);\n        /* Lazy initialize temp canvas */\n        if (!temp2d) {\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            if (!ctx) {\n                throw new Error('Texture.updateSubImage(): Failed to obtain CanvasRenderingContext2D.');\n            }\n            temp2d = {\n                canvas,\n                ctx,\n            };\n        }\n        const img = wasm._images[jsImageIndex];\n        if (!img)\n            return;\n        /** @todo: If the image is an instance of canvas, this\n         * can be skipped entirely. */\n        temp2d.canvas.width = w;\n        temp2d.canvas.height = h;\n        temp2d.ctx.drawImage(img, x, y, w, h, 0, 0, w, h);\n        const yOffset = (img.videoHeight ?? img.height) - y - h;\n        wasm._images[jsImageIndex] = temp2d.canvas;\n        wasm._wl_renderer_updateImage(image, x, yOffset);\n        wasm._images[jsImageIndex] = img;\n    }\n    /**\n     * Destroy and free the texture's texture altas space and memory.\n     *\n     * It is best practice to set the texture variable to `null` after calling\n     * destroy to prevent accidental use of the invalid texture:\n     *\n     * ```js\n     *   texture.destroy();\n     *   texture = null;\n     * ```\n     *\n     * @since 0.9.0\n     */\n    destroy() {\n        const wasm = this.engine.wasm;\n        wasm._wl_texture_destroy(this._id);\n        this.engine.textures._destroy(this);\n    }\n    /** @overload */\n    toString() {\n        if (this.isDestroyed) {\n            return 'Texture(destroyed)';\n        }\n        return `Texture(${this._index})`;\n    }\n    get _imageIndex() {\n        return this.engine.wasm._wl_texture_get_image_index(this._id);\n    }\n}\n/**\n * Wrapper around a native animation.\n */\nexport class Animation extends SceneResource {\n    /**\n     * @param index Index in the manager\n     */\n    constructor(host = WL, index) {\n        const scene = host instanceof Prefab ? host : host.scene;\n        super(scene, index);\n    }\n    /** Duration of this animation. */\n    get duration() {\n        return this.engine.wasm._wl_animation_get_duration(this._id);\n    }\n    /** Number of tracks in this animation. */\n    get trackCount() {\n        return this.engine.wasm._wl_animation_get_trackCount(this._id);\n    }\n    /**\n     * Clone this animation retargeted to a new set of objects.\n     *\n     * The clone shares most of the data with the original and is therefore\n     * light-weight.\n     *\n     * **Experimental:** This API might change in upcoming versions.\n     *\n     * If retargeting to {@link Skin}, the join names will be used to determine a mapping\n     * from the previous skin to the new skin. The source skin will be retrieved from\n     * the first track in the animation that targets a joint.\n     *\n     * @param newTargets New targets per track. Expected to have\n     *      {@link Animation#trackCount} elements or to be a {@link Skin}.\n     * @returns The retargeted clone of this animation.\n     */\n    retarget(newTargets) {\n        const wasm = this.engine.wasm;\n        if (newTargets instanceof Skin) {\n            const index = wasm._wl_animation_retargetToSkin(this._id, newTargets._id);\n            return this._scene.animations.wrap(index);\n        }\n        if (newTargets.length != this.trackCount) {\n            throw Error('Expected ' +\n                this.trackCount.toString() +\n                ' targets, but got ' +\n                newTargets.length.toString());\n        }\n        const ptr = wasm._malloc(2 * newTargets.length);\n        for (let i = 0; i < newTargets.length; ++i) {\n            const object3d = newTargets[i];\n            this.scene.assertOrigin(object3d);\n            /* Use local id here and **not** packed id, because the WASM\n             * takes ownership and reinterprets the ids. */\n            wasm.HEAPU16[ptr >> (1 + i)] = newTargets[i].objectId;\n        }\n        const index = wasm._wl_animation_retarget(this._id, ptr);\n        wasm._free(ptr);\n        return this._scene.animations.wrap(index);\n    }\n    /** @overload */\n    toString() {\n        if (this.isDestroyed) {\n            return 'Animation(destroyed)';\n        }\n        return `Animation(${this._index})`;\n    }\n}\n/**\n * Scene graph object.\n *\n * Node in the scene graph or \"entity\". Consists of transformation and a reference\n * to its parent object. Usually holds components and is accessible by components\n * through {@link Component#object}.\n *\n * Objects are stored in a data oriented manner inside WebAssembly memory. This class\n * is a JavaScript API wrapper around this memory for more convenient use in\n * components.\n *\n * Objects can be created and added to a scene through {@link Prefab.addObject}:\n *\n * ```js\n * const parent = scene.addObject();\n * parent.name = 'parent`';\n * const child = scene.addObject(parent);\n * child.name = 'child`';\n * ```\n */\nexport class Object3D {\n    /**\n     * Packed object id, containing scene index and local id.\n     *\n     * @hidden\n     */\n    _id = -1;\n    /** Object id, relative to the scene manager. @hidden */\n    _localId = -1;\n    /** Scene instance. @hidden */\n    _scene;\n    /** Wonderland Engine instance. @hidden */\n    _engine;\n    /**\n     * @param o Object id to wrap.\n     *\n     * @deprecated Objects must be obtained via {@link Scene.addObject} or {@link Scene.wrap}:\n     *\n     * ```js\n     * // Create a new object.\n     * const obj = scene.addObject();\n     *\n     * // Wrap an object using its id. The id must be valid.\n     * const obj = scene.wrap(0);\n     * ```\n     *\n     * @hidden\n     */\n    constructor(scene, id) {\n        scene = scene instanceof Prefab ? scene : scene.scene;\n        this._localId = id;\n        this._id = (scene._index << 22) | id;\n        this._scene = scene;\n        /** @todo: Remove and only keep getter. */\n        this._engine = scene.engine;\n    }\n    /**\n     * Name of the object.\n     *\n     * Useful for identifying objects during debugging.\n     */\n    get name() {\n        const wasm = this._engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_object_name(this._id));\n    }\n    /**\n     * Set the object's name.\n     *\n     * @param newName The new name to set.\n     */\n    set name(newName) {\n        const wasm = this._engine.wasm;\n        wasm._wl_object_set_name(this._id, wasm.tempUTF8(newName));\n    }\n    /**\n     * Parent of this object or `null` if parented to root.\n     */\n    get parent() {\n        const p = this._engine.wasm._wl_object_parent(this._id);\n        return p === 0 ? null : this._scene.wrap(p);\n    }\n    /**\n     * Equivalent to {@link Object3D.getChildren}.\n     *\n     * @note Prefer to use {@link Object3D.getChildren} for performance.\n     */\n    get children() {\n        return this.getChildren();\n    }\n    /** The number of children of this object. */\n    get childrenCount() {\n        return this._engine.wasm._wl_object_get_children_count(this._id);\n    }\n    /**\n     * Reparent object to given object.\n     *\n     * @note Reparenting is not trivial and might have a noticeable performance impact.\n     *\n     * @param newParent New parent or `null` to parent to root\n     */\n    set parent(newParent) {\n        this.scene.assertOrigin(newParent);\n        this._engine.wasm._wl_object_set_parent(this._id, newParent == null ? 0 : newParent._id);\n    }\n    /** Local object id in the scene manager. */\n    get objectId() {\n        return this._localId;\n    }\n    /** Scene instance. */\n    get scene() {\n        return this._scene;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n    /**\n     * Clone this hierarchy into a new one.\n     *\n     * Cloning copies the hierarchy structure, object names,\n     * as well as components.\n     *\n     * JavaScript components are cloned using {@link Component.copy}. You can\n     * override this method in your components.\n     *\n     * @param parent The parent for the cloned hierarchy or `null` to clone\n     *     into the scene root. Defaults to `null`.\n     *\n     * @returns The clone of this object.\n     */\n    clone(parent = null) {\n        this.scene.assertOrigin(parent);\n        const engine = this._engine;\n        const id = engine.wasm._wl_object_clone(this._id, parent ? parent._id : 0);\n        return this._scene.wrap(id);\n    }\n    /**\n     * Children of this object.\n     *\n     * @note Child order is **undefined**. No assumptions should be made\n     * about the index of a specific object.\n     *\n     * If you need to access a specific child of this object, you can\n     * use {@link Object3D.findByName}.\n     *\n     * When the object exists in the scene at editor time, prefer passing it as\n     * a component property.\n     *\n     * @note When providing an output array, only `this.childrenCount` elements will be written.\n     * The rest of the array will not be modified by this method.\n     *\n     * @param out Destination array, expected to have at least `this.childrenCount` elements.\n     * @returns The `out` parameter.\n     */\n    getChildren(out = new Array(this.childrenCount)) {\n        const childrenCount = this.childrenCount;\n        if (childrenCount === 0)\n            return out;\n        const wasm = this._engine.wasm;\n        wasm.requireTempMem(childrenCount * 2);\n        this._engine.wasm._wl_object_get_children(this._id, wasm._tempMem, wasm._tempMemSize >> 1);\n        for (let i = 0; i < childrenCount; ++i) {\n            out[i] = this._scene.wrap(wasm._tempMemUint16[i]);\n        }\n        return out;\n    }\n    /**\n     * Reset local transformation (translation, rotation and scaling) to identity.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetTransform() {\n        this._engine.wasm._wl_object_reset_translation_rotation(this._id);\n        this._engine.wasm._wl_object_reset_scaling(this._id);\n        return this;\n    }\n    /**\n     * Reset local position and rotation to identity.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetPositionRotation() {\n        this._engine.wasm._wl_object_reset_translation_rotation(this._id);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.resetPositionRotation} instead. */\n    resetTranslationRotation() {\n        return this.resetPositionRotation();\n    }\n    /**\n     * Reset local rotation, keep translation.\n     *\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetRotation() {\n        this._engine.wasm._wl_object_reset_rotation(this._id);\n        return this;\n    }\n    /**\n     * Reset local translation, keep rotation.\n     *\n     * @note To reset both rotation and translation, prefer\n     *       {@link resetTranslationRotation}.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetPosition() {\n        this._engine.wasm._wl_object_reset_translation(this._id);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.resetPosition} instead. */\n    resetTranslation() {\n        return this.resetPosition();\n    }\n    /**\n     * Reset local scaling to identity (``[1.0, 1.0, 1.0]``).\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    resetScaling() {\n        this._engine.wasm._wl_object_reset_scaling(this._id);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.translateLocal} instead. */\n    translate(v) {\n        return this.translateLocal(v);\n    }\n    /**\n     * Translate object by a vector in the parent's space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateLocal(v) {\n        this._engine.wasm._wl_object_translate(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    /**\n     * Translate object by a vector in object space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateObject(v) {\n        this._engine.wasm._wl_object_translate_obj(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    /**\n     * Translate object by a vector in world space.\n     *\n     * @param v Vector to translate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    translateWorld(v) {\n        this._engine.wasm._wl_object_translate_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.rotateAxisAngleDegLocal} instead. */\n    rotateAxisAngleDeg(a, d) {\n        this.rotateAxisAngleDegLocal(a, d);\n        return this;\n    }\n    /**\n     * Rotate around given axis by given angle (degrees) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleRad}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleDegLocal(a, d) {\n        this._engine.wasm._wl_object_rotate_axis_angle(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.rotateAxisAngleRadLocal} instead. */\n    rotateAxisAngleRad(a, d) {\n        return this.rotateAxisAngleRadLocal(a, d);\n    }\n    /**\n     * Rotate around given axis by given angle (radians) in local space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in radians.\n     *\n     * @note If the object is translated the rotation will be around\n     *     the parent. To rotate around the object origin, use\n     *     {@link rotateAxisAngleDegObject}\n     *\n     * @see {@link rotateAxisAngleDeg}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleRadLocal(a, d) {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n    /**\n     * Rotate around given axis by given angle (degrees) in object space.\n     *\n     * @param a Vector representing the rotation axis.\n     * @param d Angle in degrees.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @see {@link rotateAxisAngleRadObject}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleDegObject(a, d) {\n        this._engine.wasm._wl_object_rotate_axis_angle_obj(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n    /**\n     * Rotate around given axis by given angle (radians) in object space\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param a Vector representing the rotation axis\n     * @param d Angle in degrees\n     *\n     * @see {@link rotateAxisAngleDegObject}\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateAxisAngleRadObject(a, d) {\n        this._engine.wasm._wl_object_rotate_axis_angle_rad_obj(this._id, a[0], a[1], a[2], d);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.rotateLocal} instead. */\n    rotate(q) {\n        this.rotateLocal(q);\n        return this;\n    }\n    /**\n     * Rotate by a quaternion.\n     *\n     * @param q the Quaternion to rotate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateLocal(q) {\n        this._engine.wasm._wl_object_rotate_quat(this._id, q[0], q[1], q[2], q[3]);\n        return this;\n    }\n    /**\n     * Rotate by a quaternion in object space.\n     *\n     * Equivalent to prepending a rotation quaternion to the object's\n     * local transformation.\n     *\n     * @param q the Quaternion to rotate by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    rotateObject(q) {\n        this._engine.wasm._wl_object_rotate_quat_obj(this._id, q[0], q[1], q[2], q[3]);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.scaleLocal} instead. */\n    scale(v) {\n        this.scaleLocal(v);\n        return this;\n    }\n    /**\n     * Scale object by a vector in object space.\n     *\n     * @param v Vector to scale by.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    scaleLocal(v) {\n        this._engine.wasm._wl_object_scale(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    getPositionLocal(out = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        /* Translation is different than rotation & scaling.\n         * We can't simply read the memory. */\n        wasm._wl_object_get_translation_local(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    getTranslationLocal(out = new Float32Array(3)) {\n        return this.getPositionLocal(out);\n    }\n    getPositionWorld(out = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        /* Translation is different than rotation & scaling.\n         * We can't simply read the memory. */\n        wasm._wl_object_get_translation_world(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    getTranslationWorld(out = new Float32Array(3)) {\n        return this.getPositionWorld(out);\n    }\n    /**\n     * Set local / object space position.\n     *\n     * Concatenates a new translation dual quaternion onto the existing rotation.\n     *\n     * @param v New local position array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setPositionLocal(v) {\n        this._engine.wasm._wl_object_set_translation_local(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.setPositionLocal} instead. */\n    setTranslationLocal(v) {\n        return this.setPositionLocal(v);\n    }\n    /**\n     * Set world space position.\n     *\n     * Applies the inverse parent transform with a new translation dual quaternion\n     * which is concatenated onto the existing rotation.\n     *\n     * @param v New world position array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setPositionWorld(v) {\n        this._engine.wasm._wl_object_set_translation_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    /** @deprecated Please use {@link Object3D.setPositionWorld} instead. */\n    setTranslationWorld(v) {\n        return this.setPositionWorld(v);\n    }\n    getScalingLocal(out = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_scaling_local(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n    /**\n     * Set local / object space scaling.\n     *\n     * @param v New local scaling array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setScalingLocal(v) {\n        this._engine.wasm._wl_object_set_scaling_local(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    getScalingWorld(out = new Float32Array(3)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_scaling_world(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        return out;\n    }\n    /**\n     * Set World space scaling.\n     *\n     * @param v New world scaling array/vector, expected to have at least 3 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setScalingWorld(v) {\n        this._engine.wasm._wl_object_set_scaling_world(this._id, v[0], v[1], v[2]);\n        return this;\n    }\n    getRotationLocal(out = new Float32Array(4)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        /* The first 4 floats represent the rotation quaternion. */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n    /**\n     * Set local space rotation.\n     *\n     * @param v New world rotation array/vector, expected to have at least 4 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setRotationLocal(v) {\n        this._engine.wasm._wl_object_set_rotation_local(this._id, v[0], v[1], v[2], v[3]);\n        return this;\n    }\n    getRotationWorld(out = new Float32Array(4)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        /* The first 4 floats represent the rotation quaternion. */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        return out;\n    }\n    /**\n     * Set local space rotation.\n     *\n     * @param v New world rotation array/vector, expected to have at least 4 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setRotationWorld(v) {\n        this._engine.wasm._wl_object_set_rotation_world(this._id, v[0], v[1], v[2], v[3]);\n        return this;\n    }\n    getTransformLocal(out = new Float32Array(8)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        out[4] = wasm.HEAPF32[ptr + 4];\n        out[5] = wasm.HEAPF32[ptr + 5];\n        out[6] = wasm.HEAPF32[ptr + 6];\n        out[7] = wasm.HEAPF32[ptr + 7];\n        return out;\n    }\n    /**\n     * Set local space rotation.\n     *\n     * @param v New local transform array, expected to have at least 8 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setTransformLocal(v) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_local(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = v[0];\n        wasm.HEAPF32[ptr + 1] = v[1];\n        wasm.HEAPF32[ptr + 2] = v[2];\n        wasm.HEAPF32[ptr + 3] = v[3];\n        wasm.HEAPF32[ptr + 4] = v[4];\n        wasm.HEAPF32[ptr + 5] = v[5];\n        wasm.HEAPF32[ptr + 6] = v[6];\n        wasm.HEAPF32[ptr + 7] = v[7];\n        this.setDirty();\n        return this;\n    }\n    getTransformWorld(out = new Float32Array(8)) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        out[0] = wasm.HEAPF32[ptr];\n        out[1] = wasm.HEAPF32[ptr + 1];\n        out[2] = wasm.HEAPF32[ptr + 2];\n        out[3] = wasm.HEAPF32[ptr + 3];\n        out[4] = wasm.HEAPF32[ptr + 4];\n        out[5] = wasm.HEAPF32[ptr + 5];\n        out[6] = wasm.HEAPF32[ptr + 6];\n        out[7] = wasm.HEAPF32[ptr + 7];\n        return out;\n    }\n    /**\n     * Set world space rotation.\n     *\n     * @param v New world transform array, expected to have at least 8 elements.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    setTransformWorld(v) {\n        const wasm = this._engine.wasm;\n        const ptr = wasm._wl_object_trans_world(this._id) / 4; /* Align F32 */\n        wasm.HEAPF32[ptr] = v[0];\n        wasm.HEAPF32[ptr + 1] = v[1];\n        wasm.HEAPF32[ptr + 2] = v[2];\n        wasm.HEAPF32[ptr + 3] = v[3];\n        wasm.HEAPF32[ptr + 4] = v[4];\n        wasm.HEAPF32[ptr + 5] = v[5];\n        wasm.HEAPF32[ptr + 6] = v[6];\n        wasm.HEAPF32[ptr + 7] = v[7];\n        this._engine.wasm._wl_object_trans_world_to_local(this._id);\n        return this;\n    }\n    /**\n     * Local space transformation.\n     *\n     * @deprecated Please use {@link Object3D.setTransformLocal} and\n     * {@link Object3D.getTransformLocal} instead.\n     */\n    get transformLocal() {\n        const wasm = this._engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_object_trans_local(this._id), 8);\n    }\n    /**\n     * Set local transform.\n     *\n     * @param t Local space transformation.\n     *\n     * @since 0.8.5\n     *\n     * @deprecated Please use {@link Object3D.setTransformLocal} and\n     * {@link Object3D.getTransformLocal} instead.\n     */\n    set transformLocal(t) {\n        this.transformLocal.set(t);\n        this.setDirty();\n    }\n    /**\n     * Global / world space transformation.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @deprecated Please use {@link Object3D.setTransformWorld} and\n     * {@link Object3D.getTransformWorld} instead.\n     */\n    get transformWorld() {\n        const wasm = this._engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_object_trans_world(this._id), 8);\n    }\n    /**\n     * Set world transform.\n     *\n     * @param t Global / world space transformation.\n     *\n     * @since 0.8.5\n     *\n     * @deprecated Please use {@link Object3D.setTransformWorld} and\n     * {@link Object3D.getTransformWorld} instead.\n     */\n    set transformWorld(t) {\n        this.transformWorld.set(t);\n        this._engine.wasm._wl_object_trans_world_to_local(this._id);\n    }\n    /**\n     * Local / object space scaling.\n     *\n     * @deprecated Please use {@link Object3D.setScalingLocal} and\n     * {@link Object3D.getScalingLocal} instead.\n     */\n    get scalingLocal() {\n        const wasm = this._engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_object_scaling_local(this._id), 3);\n    }\n    /**\n     * Set local space scaling.\n     *\n     * @param s Local space scaling.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.setScalingLocal} and\n     * {@link Object3D.getScalingLocal} instead.\n     */\n    set scalingLocal(s) {\n        this.scalingLocal.set(s);\n        this.setDirty();\n    }\n    /**\n     * Global / world space scaling.\n     *\n     * May recompute transformations of the hierarchy of this object,\n     * if they were changed by JavaScript components this frame.\n     *\n     * @deprecated Please use {@link Object3D.setScalingWorld} and\n     * {@link Object3D.getScalingWorld} instead.\n     */\n    get scalingWorld() {\n        const wasm = this._engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_object_scaling_world(this._id), 3);\n    }\n    /**\n     * Set world space scaling.\n     *\n     * @param t World space scaling.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.setScalingWorld} and\n     * {@link Object3D.getScalingWorld} instead.\n     */\n    set scalingWorld(s) {\n        this.scalingWorld.set(s);\n        this._engine.wasm._wl_object_scaling_world_to_local(this._id);\n    }\n    /**\n     * Local space rotation.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationLocal} and\n     * {@link Object3D.setRotationLocal} instead.\n     */\n    get rotationLocal() {\n        return this.transformLocal.subarray(0, 4);\n    }\n    /**\n     * Global / world space rotation\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationWorld} and\n     * {@link Object3D.setRotationWorld} instead.\n     */\n    get rotationWorld() {\n        return this.transformWorld.subarray(0, 4);\n    }\n    /**\n     * Set local space rotation.\n     *\n     * @param r Local space rotation\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationLocal} and\n     * {@link Object3D.setRotationLocal} instead.\n     */\n    set rotationLocal(r) {\n        this._engine.wasm._wl_object_set_rotation_local(this._id, r[0], r[1], r[2], r[3]);\n    }\n    /**\n     * Set world space rotation.\n     *\n     * @param r Global / world space rotation.\n     *\n     * @since 0.8.7\n     *\n     * @deprecated Please use {@link Object3D.getRotationWorld} and\n     * {@link Object3D.setRotationWorld} instead.\n     */\n    set rotationWorld(r) {\n        this._engine.wasm._wl_object_set_rotation_world(this._id, r[0], r[1], r[2], r[3]);\n    }\n    /** @deprecated Please use {@link Object3D.getForwardWorld} instead. */\n    getForward(out) {\n        return this.getForwardWorld(out);\n    }\n    /**\n     * Compute the object's forward facing world space vector.\n     *\n     * The forward vector in object space is along the negative z-axis, i.e.,\n     * `[0, 0, -1]`.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getForwardWorld(out) {\n        out[0] = 0;\n        out[1] = 0;\n        out[2] = -1;\n        this.transformVectorWorld(out);\n        return out;\n    }\n    /** @deprecated Please use {@link Object3D.getUpWorld} instead. */\n    getUp(out) {\n        return this.getUpWorld(out);\n    }\n    /**\n     * Compute the object's up facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getUpWorld(out) {\n        out[0] = 0;\n        out[1] = 1;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n    /** @deprecated Please use {@link Object3D.getRightWorld} instead. */\n    getRight(out) {\n        return this.getRightWorld(out);\n    }\n    /**\n     * Compute the object's right facing world space vector.\n     *\n     * @param out Destination array/vector, expected to have at least 3 elements.\n     * @return The `out` parameter.\n     */\n    getRightWorld(out) {\n        out[0] = 1;\n        out[1] = 0;\n        out[2] = 0;\n        this.transformVectorWorld(out);\n        return out;\n    }\n    /**\n     * Transform a vector by this object's world transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorWorld(out, v = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a vector by this object's local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorLocal(out, v = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a point by this object's world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointWorld(out, p = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a point by this object's local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointLocal(out, p = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a vector by this object's inverse world transform.\n     *\n     * @param out Out vector.\n     * @param v Vector to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseWorld(out, v = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a vector by this object's inverse local transform.\n     *\n     * @param out Out vector\n     * @param v Vector to transform, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformVectorInverseLocal(out, v = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = v[0];\n        wasm._tempMemFloat[1] = v[1];\n        wasm._tempMemFloat[2] = v[2];\n        wasm._wl_object_transformVectorInverseLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a point by this object's inverse world transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseWorld(out, p = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat[0] = p[0];\n        wasm._tempMemFloat[1] = p[1];\n        wasm._tempMemFloat[2] = p[2];\n        wasm._wl_object_transformPointInverseWorld(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform a point by this object's inverse local transform.\n     *\n     * @param out Out point.\n     * @param p Point to transform, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    transformPointInverseLocal(out, p = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(p);\n        wasm._wl_object_transformPointInverseLocal(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        return out;\n    }\n    /**\n     * Transform an object space dual quaternion into world space.\n     *\n     * @param out Out transformation.\n     * @param q Local space transformation, default `out`.\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toWorldSpaceTransform(out, q = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toWorldSpaceTransform(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n        return out;\n    }\n    /**\n     * Transform a world space dual quaternion into local space.\n     *\n     * @param out Out transformation\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toLocalSpaceTransform(out, q = out) {\n        const p = this.parent;\n        if (p) {\n            p.toObjectSpaceTransform(out, q);\n            return out;\n        }\n        if (out !== q) {\n            out[0] = q[0];\n            out[1] = q[1];\n            out[2] = q[2];\n            out[3] = q[3];\n            out[4] = q[4];\n            out[5] = q[5];\n            out[6] = q[6];\n            out[7] = q[7];\n        }\n        return out;\n    }\n    /**\n     * Transform a world space dual quaternion into object space.\n     *\n     * @param out Out transformation.\n     * @param q World space transformation, default `out`\n     * @return The `out` parameter.\n     *\n     * @since 0.8.7\n     */\n    toObjectSpaceTransform(out, q = out) {\n        const wasm = this._engine.wasm;\n        wasm._tempMemFloat.set(q);\n        wasm._wl_object_toObjectSpaceTransform(this._id, wasm._tempMem);\n        out[0] = wasm._tempMemFloat[0];\n        out[1] = wasm._tempMemFloat[1];\n        out[2] = wasm._tempMemFloat[2];\n        out[3] = wasm._tempMemFloat[3];\n        out[4] = wasm._tempMemFloat[4];\n        out[5] = wasm._tempMemFloat[5];\n        out[6] = wasm._tempMemFloat[6];\n        out[7] = wasm._tempMemFloat[7];\n        return out;\n    }\n    /**\n     * Turn towards / look at target.\n     *\n     * Rotates the object so that its forward vector faces towards the target\n     * position. The `up` vector acts as a hint to uniquely orient the object's\n     * up direction. When orienting a view component, the projected `up` vector\n     * faces upwards on the viewing plane.\n     *\n     * @param p Target position to turn towards, in world space.\n     * @param up Up vector to align object with, in world space. Default is `[0, 1, 0]`.\n     *\n     * @returns Reference to self (for method chaining).\n     */\n    lookAt(p, up = UP_VECTOR) {\n        this._engine.wasm._wl_object_lookAt(this._id, p[0], p[1], p[2], up[0], up[1], up[2]);\n        return this;\n    }\n    /** Destroy the object with all of its components and remove it from the scene */\n    destroy() {\n        if (this._id < 0)\n            return;\n        /* This will automatically call `scene._destroyObject` */\n        this.engine.wasm._wl_object_remove(this._id);\n    }\n    /**\n     * Mark transformation dirty.\n     *\n     * Causes an eventual recalculation of {@link transformWorld}, either\n     * on next {@link getTranslationWorld}, {@link transformWorld} or\n     * {@link scalingWorld} or the beginning of next frame, whichever\n     * happens first.\n     */\n    setDirty() {\n        this._engine.wasm._wl_object_set_dirty(this._id);\n    }\n    /**\n     * Disable/enable all components of this object.\n     *\n     * @param b New state for the components.\n     *\n     * @since 0.8.5\n     */\n    set active(b) {\n        const comps = this.getComponents();\n        for (let c of comps) {\n            c.active = b;\n        }\n    }\n    getComponent(typeOrClass, index = 0) {\n        const wasm = this._engine.wasm;\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        const scene = this._scene;\n        const componentType = wasm._wl_scene_get_component_manager_index(scene._index, wasm.tempUTF8(type));\n        if (componentType < 0) {\n            /* Not a native component, try js: */\n            const typeIndex = wasm._componentTypeIndices[type];\n            if (typeIndex === undefined)\n                return null;\n            const jsIndex = wasm._wl_get_js_component_index(this._id, typeIndex, index);\n            if (jsIndex < 0)\n                return null;\n            const component = this._scene._jsComponents[jsIndex];\n            return component.constructor !== BrokenComponent ? component : null;\n        }\n        const componentId = wasm._wl_get_component_id(this._id, componentType, index);\n        return scene._components.wrapNative(componentType, componentId);\n    }\n    getComponents(typeOrClass) {\n        const wasm = this._engine.wasm;\n        const scene = this._scene;\n        let manager = null;\n        let type = null;\n        if (typeOrClass) {\n            type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n            const nativeManager = scene._components.getNativeManager(type);\n            manager = nativeManager !== null ? nativeManager : scene._components.js;\n        }\n        const components = [];\n        const maxComps = Math.floor((wasm._tempMemSize / 3) * 2);\n        const componentsCount = wasm._wl_object_get_components(this._id, wasm._tempMem, maxComps);\n        const offset = 2 * componentsCount;\n        wasm._wl_object_get_component_types(this._id, wasm._tempMem + offset, maxComps);\n        for (let i = 0; i < componentsCount; ++i) {\n            const t = wasm._tempMemUint8[i + offset];\n            const componentId = wasm._tempMemUint16[i];\n            if (manager !== null && t !== manager)\n                continue;\n            const comp = this._scene._components.wrapAny(t, componentId);\n            if (!comp)\n                continue;\n            if (type && type !== comp.constructor.TypeName)\n                continue;\n            components.push(comp);\n        }\n        return components;\n    }\n    addComponent(typeOrClass, params) {\n        const wasm = this._engine.wasm;\n        const type = isString(typeOrClass) ? typeOrClass : typeOrClass.TypeName;\n        const nativeManager = this._scene._components.getNativeManager(type);\n        const isNative = nativeManager !== null;\n        const manager = isNative ? nativeManager : this._scene._components.js;\n        let componentId = -1;\n        if (!isNative) {\n            /* JavaScript component */\n            if (!(type in wasm._componentTypeIndices)) {\n                throw new TypeError(\"Unknown component type '\" + type + \"'\");\n            }\n            componentId = wasm._wl_object_add_js_component(this._id, wasm._componentTypeIndices[type]);\n        }\n        else {\n            /* native component */\n            componentId = wasm._wl_object_add_component(this._id, manager);\n        }\n        const component = this._scene._components.wrapAny(manager, componentId);\n        if (params !== undefined)\n            component.copy(params);\n        /* Explicitly initialize js components */\n        if (!isNative) {\n            component._triggerInit();\n            /* start() is called through onActivate() */\n        }\n        /* If it was not explicitly requested by the user to leave the component inactive,\n         * we activate it as a final step. This invalidates componentIndex! */\n        if (!params || !('active' in params && !params.active)) {\n            component.active = true;\n        }\n        return component;\n    }\n    /**\n     * Search for descendants matching the name.\n     *\n     * This method is a wrapper around {@link Object3D.findByNameDirect} and\n     * {@link Object3D.findByNameRecursive}.\n     *\n     * @param name The name to search for.\n     * @param recursive If `true`, the method will look at all the descendants of this object.\n     *     If `false`, this method will only perform the search in direct children.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByName(name, recursive = false) {\n        return recursive ? this.findByNameRecursive(name) : this.findByNameDirect(name);\n    }\n    /**\n     * Search for all **direct** children matching the name.\n     *\n     * @note Even though this method is heavily optimized, it does perform\n     * a linear search to find the objects. Do not use in a hot path.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByNameDirect(name) {\n        const wasm = this._engine.wasm;\n        const id = this._id;\n        /* Divide by 4 to get half as many ushort as possible */\n        const tempSizeU16 = wasm._tempMemSize >> 2;\n        const maxCount = tempSizeU16 - 2; /* Reserve two ushort */\n        const buffer = wasm._tempMemUint16;\n        buffer[maxCount] = 0; /* Index offset */\n        buffer[maxCount + 1] = 0; /* child count */\n        const bufferPtr = wasm._tempMem;\n        const indexPtr = bufferPtr + maxCount * 2;\n        const childCountPtr = bufferPtr + maxCount * 2 + 2;\n        const namePtr = wasm.tempUTF8(name, (maxCount + 2) * 2);\n        const result = [];\n        let read = 0;\n        while ((read = wasm._wl_object_findByName(id, namePtr, indexPtr, childCountPtr, bufferPtr, maxCount))) {\n            for (let i = 0; i < read; ++i) {\n                result.push(this._scene.wrap(buffer[i]));\n            }\n        }\n        return result;\n    }\n    /**\n     * Search for **all descendants** matching the name.\n     *\n     * @note Even though this method is heavily optimized, it does perform\n     * a linear search to find the objects. Do not use in a hot path.\n     *\n     * @param name The name to search for.\n     * @returns An array of {@link Object3D} matching the name.\n     *\n     * @since 1.1.0\n     */\n    findByNameRecursive(name) {\n        const wasm = this._engine.wasm;\n        const id = this._id;\n        /* Divide by 4 to get half as many ushort as possible */\n        const tempSizeU16 = wasm._tempMemSize >> 2;\n        const maxCount = tempSizeU16 - 1; /* Reserve one ushort */\n        const buffer = wasm._tempMemUint16;\n        buffer[maxCount] = 0; /* Index offset */\n        const bufferPtr = wasm._tempMem;\n        const indexPtr = bufferPtr + maxCount * 2;\n        const namePtr = wasm.tempUTF8(name, (maxCount + 1) * 2);\n        let read = 0;\n        const result = [];\n        while ((read = wasm._wl_object_findByNameRecursive(id, namePtr, indexPtr, bufferPtr, maxCount))) {\n            for (let i = 0; i < read; ++i) {\n                result.push(this._scene.wrap(buffer[i]));\n            }\n        }\n        return result;\n    }\n    /**\n     * Whether given object's transformation has changed.\n     */\n    get changed() {\n        return !!this._engine.wasm._wl_object_is_changed(this._id);\n    }\n    /**\n     * `true` if the object is destroyed, `false` otherwise.\n     *\n     * If {@link WonderlandEngine.erasePrototypeOnDestroy} is `true`,\n     * reading a custom property will not work:\n     *\n     * ```js\n     * engine.erasePrototypeOnDestroy = true;\n     *\n     * const obj = scene.addObject();\n     * obj.customParam = 'Hello World!';\n     *\n     * console.log(obj.isDestroyed); // Prints `false`\n     * obj.destroy();\n     * console.log(obj.isDestroyed); // Prints `true`\n     * console.log(obj.customParam); // Throws an error\n     * ```\n     *\n     * @since 1.1.1\n     */\n    get isDestroyed() {\n        return this._id < 0;\n    }\n    /**\n     * Checks equality by comparing ids and **not** the JavaScript reference.\n     *\n     * @deprecate Use JavaScript reference comparison instead:\n     *\n     * ```js\n     * const objectA = scene.addObject();\n     * const objectB = scene.addObject();\n     * const objectC = objectB;\n     * console.log(objectA === objectB); // false\n     * console.log(objectA === objectA); // true\n     * console.log(objectB === objectC); // true\n     * ```\n     */\n    equals(otherObject) {\n        /** @todo(2.0.0): Remove this method. */\n        if (!otherObject)\n            return false;\n        return this._id == otherObject._id;\n    }\n    /** @overload */\n    toString() {\n        if (this.isDestroyed) {\n            return 'Object3D(destroyed)';\n        }\n        return `Object3D('${this.name}', ${this._localId})`;\n    }\n}\n/**\n * Wrapper around a native skin data.\n */\nexport class Skin extends SceneResource {\n    /** Amount of joints in this skin. */\n    get jointCount() {\n        return this.engine.wasm._wl_skin_get_joint_count(this._id);\n    }\n    /** Joints object ids for this skin */\n    get jointIds() {\n        const wasm = this.engine.wasm;\n        return new Uint16Array(wasm.HEAPU16.buffer, wasm._wl_skin_joint_ids(this._id), this.jointCount);\n    }\n    /**\n     * Dual quaternions in a flat array of size 8 times {@link jointCount}.\n     *\n     * Inverse bind transforms of the skin.\n     */\n    get inverseBindTransforms() {\n        const wasm = this.engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_skin_inverse_bind_transforms(this._id), 8 * this.jointCount);\n    }\n    /**\n     * Vectors in a flat array of size 3 times {@link jointCount}.\n     *\n     * Inverse bind scalings of the skin.\n     */\n    get inverseBindScalings() {\n        const wasm = this.engine.wasm;\n        return new Float32Array(wasm.HEAPF32.buffer, wasm._wl_skin_inverse_bind_scalings(this._id), 3 * this.jointCount);\n    }\n}\n/**\n * Wrapper around a native set of morph targets.\n *\n * ## Usage\n *\n * ```js\n * const mesh = object.getComponent('mesh');\n * const mouthTarget = mesh.morphTargets.getTargetIndex('mouth');\n * mesh.setMorphTargetWeight(mouthTarget, 0.5);\n * ```\n *\n * @since 1.2.0\n */\nexport class MorphTargets extends Resource {\n    /** Amount of targets in this morph target set. */\n    get count() {\n        return this.engine.wasm._wl_morph_targets_get_target_count(this._id);\n    }\n    /** Returns the name of a given target */\n    getTargetName(target) {\n        if (target >= this.count) {\n            throw new Error(`Index ${target} is out of bounds for ${this.count} targets`);\n        }\n        const wasm = this.engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_morph_targets_get_target_name(this._id, target));\n    }\n    /**\n     * Get the index for a given target name.\n     *\n     * Throws if no target with that name exists.\n     *\n     * @param name Name of the target.\n     */\n    getTargetIndex(name) {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_morph_targets_get_target_index(this._id, wasm.tempUTF8(name));\n        if (index === -1) {\n            throw Error(`Missing target '${name}'`);\n        }\n        return index;\n    }\n}\n/* For backward compatibility with < 1.0.0. */\nexport { Object3D as Object };\n/**\n * Ray hit.\n *\n * Result of a {@link Scene.rayCast} or {@link Physics.rayCast}.\n *\n * @note this class wraps internal engine data and should only be created internally.\n */\nexport class RayHit {\n    /** Scene instance. @hidden */\n    _scene;\n    /** Pointer to the memory heap. */\n    _ptr;\n    /**\n     * @param ptr Pointer to the ray hits memory.\n     */\n    constructor(scene, ptr) {\n        if ((ptr & 3) !== 0) {\n            throw new Error('Misaligned pointer: please report a bug');\n        }\n        this._scene = scene;\n        this._ptr = ptr;\n    }\n    getLocations(out) {\n        out = out ?? Array.from({ length: this.hitCount }, () => new Float32Array(3));\n        const wasm = this.engine.wasm;\n        const alignedPtr = this._ptr / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const locationPtr = alignedPtr + 3 * i;\n            out[i][0] = wasm.HEAPF32[locationPtr];\n            out[i][1] = wasm.HEAPF32[locationPtr + 1];\n            out[i][2] = wasm.HEAPF32[locationPtr + 2];\n        }\n        return out;\n    }\n    getNormals(out) {\n        out = out ?? Array.from({ length: this.hitCount }, () => new Float32Array(3));\n        const wasm = this.engine.wasm;\n        const alignedPtr = (this._ptr + 48) / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const normalPtr = alignedPtr + 3 * i;\n            out[i][0] = wasm.HEAPF32[normalPtr];\n            out[i][1] = wasm.HEAPF32[normalPtr + 1];\n            out[i][2] = wasm.HEAPF32[normalPtr + 2];\n        }\n        return out;\n    }\n    getDistances(out = new Float32Array(this.hitCount)) {\n        const wasm = this.engine.wasm;\n        const alignedPtr = (this._ptr + 48 * 2) / 4; /* Align F32 */\n        for (let i = 0; i < this.hitCount; ++i) {\n            const distancePtr = alignedPtr + i;\n            out[i] = wasm.HEAPF32[distancePtr];\n        }\n        return out;\n    }\n    /**\n     * Array of hit objects.\n     *\n     * @param out Destination array/vector, expected to have at least `this.hitCount` elements.\n     * @returns The `out` parameter.\n     */\n    getObjects(out = new Array(this.hitCount)) {\n        const HEAPU16 = this.engine.wasm.HEAPU16;\n        const alignedPtr = (this._ptr + (48 * 2 + 16)) >> 1;\n        for (let i = 0; i < this.hitCount; ++i) {\n            out[i] = this._scene.wrap(HEAPU16[alignedPtr + i]);\n        }\n        return out;\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._scene.engine;\n    }\n    /**\n     * Equivalent to {@link RayHit.getLocations}.\n     *\n     * @note Prefer to use {@link RayHit.getLocations} for performance.\n     */\n    get locations() {\n        return this.getLocations();\n    }\n    /**\n     * Equivalent to {@link RayHit.getNormals}.\n     *\n     * @note Prefer to use {@link RayHit.getNormals} for performance.\n     */\n    get normals() {\n        return this.getNormals();\n    }\n    /**\n     * Equivalent to {@link RayHit.getDistances}.\n     *\n     * @note Prefer to use {@link RayHit.getDistances} for performance.\n     */\n    get distances() {\n        return this.getDistances();\n    }\n    /**\n     * Equivalent to {@link RayHit.getObjects}.\n     *\n     * @note Prefer to use {@link RayHit.getObjects} for performance.\n     */\n    get objects() {\n        /** @todo: Remove at 2.0.0, this is kept for backward compatibility. */\n        const objects = [null, null, null, null];\n        return this.getObjects(objects);\n    }\n    /** Number of hits (max 4) */\n    get hitCount() {\n        return Math.min(this.engine.wasm.HEAPU32[this._ptr / 4 + 30], 4);\n    }\n}\nclass math {\n    /** (Experimental!) Cubic Hermite spline interpolation for vector3 and quaternions.\n     *\n     * With `f == 0`, `out` will be `b`, if `f == 1`, `out` will be c.\n     *\n     * Whether a quaternion or vector3 interpolation is intended is determined by\n     * length of `a`.\n     *\n     * @param out Array to write result to.\n     * @param a First tangent/handle.\n     * @param b First point or quaternion.\n     * @param c Second point or quaternion.\n     * @param d Second handle.\n     * @param f Interpolation factor in [0; 1].\n     * @returns The `out` parameter.\n     *\n     * @since 0.8.6\n     */\n    static cubicHermite(out, a, b, c, d, f, engine = WL) {\n        const wasm = engine.wasm;\n        wasm._tempMemFloat.subarray(0).set(a);\n        wasm._tempMemFloat.subarray(4).set(b);\n        wasm._tempMemFloat.subarray(8).set(c);\n        wasm._tempMemFloat.subarray(12).set(d);\n        const isQuat = a.length == 4;\n        wasm._wl_math_cubicHermite(wasm._tempMem + 4 * 16, wasm._tempMem + 4 * 0, wasm._tempMem + 4 * 4, wasm._tempMem + 4 * 8, wasm._tempMem + 4 * 12, f, isQuat);\n        out[0] = wasm._tempMemFloat[16];\n        out[1] = wasm._tempMemFloat[17];\n        out[2] = wasm._tempMemFloat[18];\n        if (isQuat)\n            out[3] = wasm._tempMemFloat[19];\n        return out;\n    }\n}\nexport { math };\n/**\n * Class for accessing internationalization (i18n) features.\n *\n * Allows {@link I18N.onLanguageChanged \"detecting language change\"},\n * {@link I18N.language \"setting the current language\"} or translating\n * {@link I18N.translate \"individual terms\"}.\n *\n * Internationalization works with terms,\n * a string type keyword that is linked to a different text for each language.\n *\n * Internally, string parameters for text and js components are\n * automatically swapped during language change, given they are linked to a term.\n * If manual text swapping is desired, {@link I18N.translate}\n * can be used to retrieve the current translation for any term.\n *\n * You can also use the {@link I18N.onLanguageChanged} to manually update text\n * when a language is changed to for example update a number in a string.\n *\n * @since 1.0.0\n */\nexport class I18N {\n    /**\n     * {@link Emitter} for language change events.\n     *\n     * First parameter to a listener is the old language index,\n     * second parameter is the new language index.\n     *\n     * Usage from a within a component:\n     *\n     * ```js\n     * this.engine.i18n.onLanguageChanged.add((oldLanguageIndex, newLanguageIndex) => {\n     *     const oldLanguage = this.engine.i18n.languageName(oldLanguageIndex);\n     *     const newLanguage = this.engine.i18n.languageName(newLanguageIndex);\n     *     console.log(\"Switched from\", oldLanguage, \"to\", newLanguage);\n     * });\n     * ```\n     */\n    onLanguageChanged = new Emitter();\n    /** Wonderland Engine instance. @hidden */\n    _engine;\n    /** Previously set language index. @hidden */\n    _prevLanguageIndex = -1;\n    /**\n     * Constructor\n     */\n    constructor(engine) {\n        this._engine = engine;\n    }\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @note This is equivalent to {@link I18N.setLanguage}.\n     *\n     * @param code Language code to switch to\n     */\n    set language(code) {\n        this.setLanguage(code);\n    }\n    /** Get current language code. */\n    get language() {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_currentLanguage();\n        if (code === 0)\n            return null;\n        return wasm.UTF8ToString(code);\n    }\n    /**\n     * Get the current language index.\n     *\n     * This method is more efficient than its equivalent:\n     *\n     * ```js\n     * const index = i18n.languageIndex(i18n.language);\n     * ```\n     */\n    get currentIndex() {\n        return this._engine.wasm._wl_i18n_currentLanguageIndex();\n    }\n    /** Previous language index. */\n    get previousIndex() {\n        return this._prevLanguageIndex;\n    }\n    /**\n     * Set current language and apply translations to linked text parameters.\n     *\n     * @param code The language code.\n     * @returns A promise that resolves with the current index code when the\n     *     language is loaded.\n     */\n    async setLanguage(code) {\n        if (code == null)\n            return Promise.resolve(this.currentIndex);\n        const wasm = this._engine.wasm;\n        this._prevLanguageIndex = this.currentIndex;\n        wasm._wl_i18n_setLanguage(wasm.tempUTF8(code));\n        const scene = this.engine.scene;\n        const filename = wasm.UTF8ToString(wasm._wl_i18n_languageFile(this.currentIndex));\n        const url = `${scene.baseURL}/locale/${filename}`;\n        await scene._downloadDependency(url);\n        this.onLanguageChanged.notify(this._prevLanguageIndex, this.currentIndex);\n        return this.currentIndex;\n    }\n    /**\n     * Get translated string for a term for the currently loaded language.\n     *\n     * @param term Term to translate\n     */\n    translate(term) {\n        const wasm = this._engine.wasm;\n        const translation = wasm._wl_i18n_translate(wasm.tempUTF8(term));\n        if (translation === 0)\n            return null;\n        return wasm.UTF8ToString(translation);\n    }\n    /**\n     * Get the number of languages in the project.\n     *\n     */\n    languageCount() {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageCount();\n    }\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageIndex(code) {\n        const wasm = this._engine.wasm;\n        return wasm._wl_i18n_languageIndex(wasm.tempUTF8(code));\n    }\n    /**\n     * Get a language code.\n     *\n     * @param index Index of the language to get the code from\n     */\n    languageCode(index) {\n        const wasm = this._engine.wasm;\n        const code = wasm._wl_i18n_languageCode(index);\n        if (code === 0)\n            return null;\n        return wasm.UTF8ToString(code);\n    }\n    /**\n     * Get a language name.\n     *\n     * @param index Index of the language to get the name from\n     */\n    languageName(index) {\n        const wasm = this._engine.wasm;\n        const name = wasm._wl_i18n_languageName(index);\n        if (name === 0)\n            return null;\n        return wasm.UTF8ToString(name);\n    }\n    /** Hosting engine instance. */\n    get engine() {\n        return this._engine;\n    }\n}\n/** Properties of a WebXR session */\nexport class XR {\n    /** Wonderland WASM bridge. @hidden */\n    #wasm;\n    #mode;\n    constructor(wasm, mode) {\n        this.#wasm = wasm;\n        this.#mode = mode;\n    }\n    /** Current WebXR session mode */\n    get sessionMode() {\n        return this.#mode;\n    }\n    /** Current WebXR session */\n    get session() {\n        return this.#wasm.webxr_session;\n    }\n    /** Current WebXR frame */\n    get frame() {\n        return this.#wasm.webxr_frame;\n    }\n    referenceSpaceForType(type) {\n        return this.#wasm.webxr_refSpaces[type] ?? null;\n    }\n    /** Set current reference space type used for retrieving eye, head, hand and joint poses */\n    set currentReferenceSpace(refSpace) {\n        this.#wasm.webxr_refSpace = refSpace;\n        this.#wasm.webxr_refSpaceType = null;\n        for (const type of Object.keys(this.#wasm.webxr_refSpaces)) {\n            if (this.#wasm.webxr_refSpaces[type] === refSpace) {\n                /* Keep track of reference space type */\n                this.#wasm.webxr_refSpaceType = type;\n            }\n        }\n    }\n    /** Current reference space type used for retrieving eye, head, hand and joint poses */\n    get currentReferenceSpace() {\n        return this.#wasm.webxr_refSpace;\n    }\n    /** Current WebXR reference space type or `null` if not a default reference space */\n    get currentReferenceSpaceType() {\n        return this.#wasm.webxr_refSpaceType;\n    }\n    /** Current WebXR base layer  */\n    get baseLayer() {\n        return this.#wasm.webxr_baseLayer;\n    }\n    /** Current WebXR framebuffer */\n    get framebuffers() {\n        if (!Array.isArray(this.#wasm.webxr_fbo)) {\n            return [this.#wasm.GL.framebuffers[this.#wasm.webxr_fbo]];\n        }\n        return this.#wasm.webxr_fbo.map((id) => this.#wasm.GL.framebuffers[id]);\n    }\n}\n", "import { capitalizeFirstUTF8, createDestroyedProxy } from '../utils/misc.js';\nimport { Resource, ResourceManager } from './resource.js';\n/**\n * Material parameter type.\n */\nexport var MaterialParamType;\n(function (MaterialParamType) {\n    /** Unsigned integer parameter type. */\n    MaterialParamType[MaterialParamType[\"UnsignedInt\"] = 0] = \"UnsignedInt\";\n    /** Integer parameter type. */\n    MaterialParamType[MaterialParamType[\"Int\"] = 1] = \"Int\";\n    /** 16-bit float parameter type. */\n    MaterialParamType[MaterialParamType[\"HalfFloat\"] = 2] = \"HalfFloat\";\n    /** Float parameter type. */\n    MaterialParamType[MaterialParamType[\"Float\"] = 3] = \"Float\";\n    /** Sampler resource parameter type, i.e., a {@link Texture}. */\n    MaterialParamType[MaterialParamType[\"Sampler\"] = 4] = \"Sampler\";\n    /**\n     * Font resource parameter type.\n     *\n     * **Note**: Changing font isn't exposed yet and will raise an error.\n     */\n    MaterialParamType[MaterialParamType[\"Font\"] = 5] = \"Font\";\n})(MaterialParamType || (MaterialParamType = {}));\n/**\n * Wrapper around a native material.\n *\n * For more information about how to create materials, have a look at the\n * {@link MaterialManager} class.\n *\n * #### Properties\n *\n * The material properties are automatically converted into getters/setters:\n *\n * ```js\n * const material = new PhongMaterial();\n *\n * // Set the `diffuseColor` property\n * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n * console.log(material.getDiffuseColor());\n * ```\n *\n * Getters for non-scalar types have an optional argument to skip an array\n * allocation:\n *\n * ```js\n * const material = new PhongMaterial();\n * const diffuse = [0, 0, 0, 0];\n * material.getDiffuseColor(diffuse);\n * console.log(diffuse) // Prints '[1.0, 1.0, 1.0, 1.0]'\n * ```\n *\n * @note Materials are **per-engine**, they can thus be shared by multiple scenes.\n *\n * @since 1.2.0\n */\nexport class Material extends Resource {\n    /** Proxy used to override prototypes of destroyed materials. */\n    static _destroyedPrototype = createDestroyedProxy('material');\n    /**\n     * @deprecated Use {@link MaterialManager#getTemplate} via {@link WonderlandEngine.materials}\n     * to create a new material with a given pipeline:\n     *\n     * ```js\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongMaterial();\n     * material.setDiffuseColor([1, 0, 0]);\n     * ```\n     */\n    constructor(engine, params) {\n        if (typeof params !== 'number') {\n            if (!params?.pipeline)\n                throw new Error(\"Missing parameter 'pipeline'\");\n            const template = engine.materials.getTemplate(params.pipeline);\n            const material = new template();\n            super(engine, material._index);\n            return material;\n        }\n        super(engine, params);\n    }\n    /**\n     * Check whether a parameter exists on this material.\n     *\n     * @param name The name to check.\n     * @returns `true` if the parameter with name `name` exists on this material,\n     *     `false` otherwise.\n     */\n    hasParameter(name) {\n        const parameters = this.constructor.Parameters;\n        return parameters && parameters.has(name);\n    }\n    /** @deprecated Use {@link #pipeline} instead. */\n    get shader() {\n        return this.pipeline;\n    }\n    /** Name of the pipeline used by this material. */\n    get pipeline() {\n        const wasm = this.engine.wasm;\n        return wasm.UTF8ToString(wasm._wl_material_get_pipeline(this._id));\n    }\n    /**\n     * Create a copy of the underlying native material.\n     *\n     * @returns Material clone.\n     */\n    clone() {\n        const index = this.engine.wasm._wl_material_clone(this._id);\n        return this.engine.materials.wrap(index);\n    }\n    /** @overload */\n    toString() {\n        if (this.isDestroyed) {\n            return 'Material(destroyed)';\n        }\n        return `Material('${this.pipeline}', ${this._index})`;\n    }\n    /**\n     * Wrap a native material index.\n     *\n     * @param engine Engine instance.\n     * @param index The index.\n     * @returns Material instance or `null` if index <= 0.\n     *\n     * @deprecated Use the {@link WonderlandEngine.materials} instead.\n     */\n    static wrap(engine, index) {\n        return engine.materials.wrap(index);\n    }\n}\n/**\n * Manage materials.\n *\n * #### Creation\n *\n * To create a material, first retrieve the class associated to\n * the pipeline using {@link MaterialManager.getTemplate}:\n *\n * ```js\n * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n * ```\n *\n * Creating a material is then done using the constructor:\n *\n * ```js\n * const material = new PhongMaterial();\n * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n * ```\n */\nexport class MaterialManager extends ResourceManager {\n    /** Material classes. @hidden. */\n    _materialTemplates = [];\n    /** @hidden */\n    constructor(engine) {\n        super(engine, Material);\n        this._cacheDefinitions();\n    }\n    /** @override */\n    wrap(index) {\n        if (index <= 0)\n            return null;\n        const cached = this._cache[index];\n        if (cached)\n            return cached;\n        const wasm = this.engine.wasm;\n        const definition = wasm._wl_material_get_definition(index);\n        const Template = this._materialTemplates[definition];\n        const material = new Template(index);\n        return this._wrapInstance(material);\n    }\n    /**\n     * Get the material class with the given pipeline name.\n     *\n     * #### Usage\n     *\n     * ```js\n     * const PhongMaterial = engine.materials.getTemplate('Phong Opaque');\n     * const material = new PhongMaterial();\n     * material.setDiffuseColor([1.0, 0.0, 0.0, 1.0]);\n     * ```\n     *\n     * @param pipeline The pipeline name to search for.\n     * @returns The material class.\n     *\n     * @throws `Error` if the material class doesn't exist.\n     */\n    getTemplate(pipeline) {\n        const wasm = this.engine.wasm;\n        const index = wasm._wl_get_material_definition_index(wasm.tempUTF8(pipeline));\n        if (!index) {\n            throw new Error(`Pipeline '${pipeline}' doesn't exist in the scene`);\n        }\n        return this._materialTemplates[index];\n    }\n    /**\n     * Wrap a material instance.\n     *\n     * @todo: Remove at 2.0.0.\n     *\n     * @note Wrapping should only be called once per instance.\n     *\n     * @param instance The material instance.\n     * @returns The new material, wrapped in a proxy.\n     */\n    _wrapInstance(instance) {\n        this._cache[instance.index] = instance;\n        if (!this.engine.legacyMaterialSupport)\n            return instance;\n        /** @todo: Remove at 2.0.0. This is kept for backward compatibility. */\n        const proxy = new Proxy(instance, {\n            get(target, prop) {\n                if (!target.hasParameter(prop)) {\n                    return target[prop];\n                }\n                /** This is slow, but users should migrate to `getParam` */\n                const name = `get${capitalizeFirstUTF8(prop)}`;\n                return target[name]();\n            },\n            set(target, prop, value) {\n                if (!target.hasParameter(prop)) {\n                    target[prop] = value;\n                    return true;\n                }\n                /** This is slow, but users should migrate to `getParam` */\n                const name = `set${capitalizeFirstUTF8(prop)}`;\n                target[name](value);\n                return true;\n            },\n        });\n        this._cache[instance.index] = proxy;\n        return proxy;\n    }\n    /**\n     * Cache all pipeline definitions.\n     *\n     * @hidden\n     */\n    _cacheDefinitions() {\n        const wasm = this.engine.wasm;\n        const count = wasm._wl_get_material_definition_count();\n        for (let i = 0; i < count; ++i) {\n            this._materialTemplates[i] = this._createMaterialTemplate(i);\n        }\n    }\n    /**\n     * Create a material class from a definition index.\n     *\n     * @param wasm The WASM instance.\n     * @param definitionIndex The definition index to wrap.\n     * @returns The material class.\n     */\n    _createMaterialTemplate(definitionIndex) {\n        const engine = this.engine;\n        const template = class CustomMaterial extends Material {\n            static Parameters = new Set();\n            constructor(index) {\n                index = index ?? engine.wasm._wl_material_create(definitionIndex);\n                super(engine, index);\n                /** @todo(2.0.0): Unify with Material. We need to wrap in both since materials\n                 * can be created via the parent class, or via child classes.\n                 * In addition, wrapping returns a proxy, we want to support Proxy<Material>\n                 * as well as Proxy<CustomMaterial>. */\n                return engine.materials._wrapInstance(this);\n            }\n        };\n        const wasm = this.engine.wasm;\n        const nbParams = wasm._wl_material_definition_get_param_count(definitionIndex);\n        for (let index = 0; index < nbParams; ++index) {\n            const name = wasm.UTF8ToString(wasm._wl_material_definition_get_param_name(definitionIndex, index));\n            template.Parameters.add(name);\n            const t = wasm._wl_material_definition_get_param_type(definitionIndex, index);\n            const type = t & 0xff;\n            const componentCount = (t >> 8) & 0xff;\n            /* metaType could also be extracted using: (t >> 16) & 0xff */\n            const capitalized = capitalizeFirstUTF8(name);\n            const getterId = `get${capitalized}`;\n            const setterId = `set${capitalized}`;\n            const templateProto = template.prototype;\n            switch (type) {\n                case MaterialParamType.UnsignedInt:\n                    templateProto[getterId] = uint32Getter(index, componentCount);\n                    /* For now, it's only possible to set scalar uint values */\n                    templateProto[setterId] = uint32Setter(index);\n                    break;\n                case MaterialParamType.Int:\n                    templateProto[getterId] = int32Getter(index, componentCount);\n                    /* For now, it's only possible to set scalar int values. Integer values setter\n                     * is purposely shared with uint. */\n                    templateProto[setterId] = uint32Setter(index);\n                    break;\n                case MaterialParamType.HalfFloat:\n                case MaterialParamType.Float:\n                    templateProto[getterId] = float32Getter(index, componentCount);\n                    templateProto[setterId] = float32Setter(index);\n                    break;\n                case MaterialParamType.Sampler:\n                    templateProto[getterId] = samplerGetter(index);\n                    templateProto[setterId] = samplerSetter(index);\n                    break;\n                case MaterialParamType.Font:\n                    templateProto[getterId] = fontGetter(index);\n                    /* For now, setting fonts is not supported */\n                    break;\n            }\n        }\n        return template;\n    }\n}\n/** @todo: With this implementation, `_wl_material_get_param_value`\n * do not need to check for the parameter type anymore, we could use\n * explicit calls. */\nfunction uint32Getter(index, count) {\n    if (count === 1) {\n        return function () {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemUint32[0];\n        };\n    }\n    return function (out = new Uint32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemUint32[i];\n        }\n        return out;\n    };\n}\nfunction uint32Setter(index) {\n    return function (value) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_set_param_value_uint(this._id, index, value);\n    };\n}\nfunction int32Getter(index, count) {\n    if (count === 1) {\n        return function () {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemInt[0];\n        };\n    }\n    return function (out = new Int32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemInt[i];\n        }\n        return out;\n    };\n}\nfunction float32Getter(index, count) {\n    if (count === 1) {\n        return function () {\n            const wasm = this.engine.wasm;\n            wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n            return wasm._tempMemFloat[0];\n        };\n    }\n    return function (out = new Float32Array(count)) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        for (let i = 0; i < out.length; ++i) {\n            out[i] = wasm._tempMemFloat[i];\n        }\n        return out;\n    };\n}\nfunction float32Setter(index) {\n    return function (value) {\n        const wasm = this.engine.wasm;\n        let count = 1;\n        if (typeof value === 'number') {\n            wasm._tempMemFloat[0] = value;\n        }\n        else {\n            count = value.length;\n            for (let i = 0; i < count; ++i)\n                wasm._tempMemFloat[i] = value[i];\n        }\n        wasm._wl_material_set_param_value_float(this._id, index, wasm._tempMem, count);\n    };\n}\nfunction samplerGetter(index) {\n    return function () {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        return this.engine.textures.wrap(wasm._tempMemInt[0]);\n    };\n}\nfunction samplerSetter(index) {\n    return function (value) {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_set_param_value_uint(this._id, index, value._id);\n    };\n}\nfunction fontGetter(index) {\n    return function () {\n        const wasm = this.engine.wasm;\n        wasm._wl_material_get_param_value(this._id, index, wasm._tempMem);\n        return this.engine.fonts.wrap(wasm._tempMemInt[0]);\n    };\n}\n", "import { BitSet } from './bitset.js';\n/**\n * Logging levels supported by {@link Logger}.\n */\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Info\"] = 0] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 1] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 2] = \"Error\";\n})(LogLevel || (LogLevel = {}));\n/**\n * Logging wrapper.\n *\n * This is used to allow turning on/off:\n *     - `console.log`\n *     - `console.warn`\n *     - `console.error`\n *\n * #### Usage\n *\n * ```js\n * import {Logger, LogLevel, LogTag} from '@wonderlandengine/api';\n *\n * // Create a logger with only the \"error\" and \"warn\" levels activated\n * const logger = new Logger(LogLevel.Warn, LogLevel.Error);\n *\n * // Only the \"error\" and \"warn\" levels are activated,\n * // this message isn't logged.\n * logger.info(LogTag.Component, 'This message is shushed')\n *\n * // Prints 'Hello Error!'\n * logger.error(LogTag.Component, 'Hello Error!');\n *\n * // Prints 'Hello Warning!'\n * logger.warn(LogTag.Component, 'Hello Warning!');\n * ```\n *\n * The log levels can be changed at anytime using the {@link BitSet} api:\n *\n * ```js\n * // Enable the \"info\" level\n * logger.levels.enable(LogLevel.Info);\n * * // Disable the \"warn\" level\n * logger.levels.disable(LogLevel.Warn);\n * ```\n *\n * #### Tags\n *\n * In addition, the logger supports tagging messages:\n *\n * ```js\n * import {Logger, LogLevel, LogTag} from '@wonderlandengine/api';\n *\n * const logger = new Logger(LogLevel.Info);\n *\n * logger.tags.disableAll();\n *\n * // All tags are off, this message isn't logged\n * logger.info(LogTag.Component, 'This message is shushed');\n *\n * logger.tags.enable(LogTag.Component);\n * logger.info(LogTag.Component, 'Hello World!') // Prints 'Hello World!'\n * ```\n *\n * The tagging system gives another layer of control to enable / disable\n * some specific logs.\n */\nexport class Logger {\n    /**\n     * Bitset of enabled levels.\n     *\n     * @hidden\n     */\n    levels = new BitSet();\n    /**\n     * Bitset of enabled tags.\n     *\n     * @hidden\n     */\n    tags = new BitSet().enableAll();\n    /**\n     * Create a new logger instance.\n     *\n     * @param levels Default set of levels to enable.\n     */\n    constructor(...levels) {\n        this.levels.enable(...levels);\n    }\n    /**\n     * Log the message(s) using `console.log`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    info(tag, ...msg) {\n        if (this.levels.enabled(LogLevel.Info) && this.tags.enabled(tag)) {\n            console.log(...msg);\n        }\n        return this;\n    }\n    /**\n     * Log the message(s) using `console.warn`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    warn(tag, ...msg) {\n        if (this.levels.enabled(LogLevel.Warn) && this.tags.enabled(tag)) {\n            console.warn(...msg);\n        }\n        return this;\n    }\n    /**\n     * Log the message(s) using `console.error`.\n     *\n     * @param tag Tag represented by a positive integer.\n     * @param msg A spread of message to log.\n     * @returns Reference to self (for method chaining).\n     */\n    error(tag, ...msg) {\n        if (this.levels.enabled(LogLevel.Error) && this.tags.enabled(tag)) {\n            console.error(...msg);\n        }\n        return this;\n    }\n}\n", "import { LogTag } from './index.js';\nimport { Type, defaultPropertyCloner } from './property.js';\nimport { RetainEmitter } from './utils/event.js';\nimport { CBOR } from './utils/cbor.js';\nimport { Logger } from './utils/logger.js';\nimport { inheritProperties, Component, BrokenComponent, XR, } from './wonderland.js';\n/**\n * Default component parameter value per type.\n */\nconst _componentDefaults = new Map([\n    [Type.Bool, false],\n    [Type.Int, 0],\n    [Type.Float, 0.0],\n    [Type.String, ''],\n    [Type.Enum, undefined],\n    [Type.Object, null],\n    [Type.Mesh, null],\n    [Type.Texture, null],\n    [Type.Material, null],\n    [Type.Animation, null],\n    [Type.Skin, null],\n    [Type.Color, Float32Array.from([0.0, 0.0, 0.0, 1.0])],\n    [Type.Vector2, Float32Array.from([0.0, 0.0])],\n    [Type.Vector3, Float32Array.from([0.0, 0.0, 0.0])],\n    [Type.Vector4, Float32Array.from([0.0, 0.0, 0.0, 0.0])],\n]);\n/**\n * Setup the defaults value of the properties on a given\n * component class.\n *\n * @param ctor The component class\n */\nfunction _setupDefaults(ctor) {\n    for (const name in ctor.Properties) {\n        const p = ctor.Properties[name];\n        if (p.type === Type.Enum) {\n            /* Enum default can be a string or an index. Convert to and/or\n             * sanity-check the index. */\n            if (p.values?.length) {\n                /* Don't try to look up the default if the user specified a\n                 * number or we already converted to one. */\n                if (typeof p.default !== 'number') {\n                    /* If undefined, missing element or wrong type this returns\n                     * -1 which becomes 0 below. This matches editor behavior. */\n                    p.default = p.values.indexOf(p.default);\n                }\n                if (p.default < 0 || p.default >= p.values.length) {\n                    p.default = 0;\n                }\n            }\n            else {\n                /* There's no index value that makes sense */\n                p.default = undefined;\n            }\n        }\n        else if ((p.type === Type.Color ||\n            p.type === Type.Vector2 ||\n            p.type === Type.Vector3 ||\n            p.type === Type.Vector4) &&\n            Array.isArray(p.default)) {\n            /* Defaults provided by user code are currently always a standard\n             * array, but become a typed array on the property */\n            p.default = Float32Array.from(p.default);\n        }\n        else if (p.default === undefined) {\n            const cloner = p.cloner ?? defaultPropertyCloner;\n            p.default = cloner.clone(p.type, _componentDefaults.get(p.type));\n        }\n        ctor.prototype[name] = p.default;\n    }\n}\n/**\n * Determines a fixed order for property attributes used for deserialization.\n *\n * @param ctor The component class\n */\nfunction _setPropertyOrder(ctor) {\n    ctor._propertyOrder = ctor.hasOwnProperty('Properties')\n        ? Object.keys(ctor.Properties).sort()\n        : [];\n}\n/**\n * Low-level wrapper to interact with the WebAssembly code.\n *\n * @hidden\n */\nexport class WASM {\n    /**\n     * Emscripten worker field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    worker = '';\n    /**\n     * Emscripten wasm field.\n     *\n     * @note This api is meant to be used internally.\n     */\n    wasm = null;\n    /**\n     * Emscripten canvas.\n     *\n     * @note This api is meant to be used internally.\n     */\n    canvas = null;\n    /**\n     * WebGPU device.\n     *\n     * @note This api is meant to be used internally.\n     */\n    preinitializedWebGPUDevice = null;\n    /** Current WebXR  */\n    /**\n     * Emscripten WebXR session.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_session = null;\n    /**\n     * Emscripten WebXR request session callback.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_requestSession = null;\n    /**\n     * Emscripten WebXR offer session callback.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_offerSession = null;\n    /**\n     * Emscripten WebXR frame.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_frame = null;\n    /**\n     * Emscripten current WebXR reference space.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_refSpace = null;\n    /**\n     * Emscripten WebXR reference spaces.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_refSpaces = null;\n    /**\n     * Emscripten WebXR current reference space type.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_refSpaceType = null;\n    /**\n     * Emscripten WebXR GL projection layer.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_baseLayer = null;\n    /**\n     * Emscripten WebXR framebuffer scale factor.\n     *\n     * @note This api is meant to be used internally.\n     */\n    webxr_framebufferScaleFactor = 1.0;\n    /**\n     * Emscripten WebXR framebuffer(s).\n     *\n     * @note This api is meant to be used internally.\n     */\n    /* webxr_fbo will not get overwritten if we are rendering to the\n     * default framebuffer, e.g., when using WebXR emulator. */\n    webxr_fbo = 0;\n    /**\n     * Convert a WASM memory view to a JavaScript string.\n     *\n     * @param ptr Pointer start\n     * @param ptrEnd Pointer end\n     * @returns JavaScript string\n     */\n    UTF8ViewToString;\n    /** Logger instance. */\n    _log = new Logger();\n    /** If `true`, logs will not spam the console on error. */\n    _deactivate_component_on_error = false;\n    /** Temporary memory pointer. */\n    _tempMem = null;\n    /** Temporary memory size. */\n    _tempMemSize = 0;\n    /** Temporary float memory view. */\n    _tempMemFloat = null;\n    /** Temporary int memory view. */\n    _tempMemInt = null;\n    /** Temporary uint8 memory view. */\n    _tempMemUint8 = null;\n    /** Temporary uint32 memory view. */\n    _tempMemUint32 = null;\n    /** Temporary uint16 memory view. */\n    _tempMemUint16 = null;\n    /** Loading screen .bin file data */\n    _loadingScreen = null;\n    /** List of callbacks triggered when the scene is loaded. */\n    _sceneLoadedCallback = [];\n    /** Image cache. */\n    _images = [null];\n    /** Component instances. */\n    _components = null;\n    /** Component Type info. */\n    _componentTypes = [];\n    /** Index per component type name. */\n    _componentTypeIndices = {};\n    /** Wonderland engine instance. */\n    _engine = null;\n    /**\n     * `true` if this runtime is using physx.\n     *\n     * @note This api is meant to be used internally.\n     */\n    _withPhysX = false;\n    /** Decoder for UTF8 `ArrayBuffer` to JavaScript string. */\n    _utf8Decoder = new TextDecoder('utf8');\n    /**\n     * Registration index of {@link BrokenComponent}.\n     *\n     * This is used to return dummy instances when a component\n     * isn't registered.\n     *\n     * @hidden\n     */\n    _brokenComponentIndex = 0;\n    /**\n     * Create a new instance of the WebAssembly <> API bridge.\n     *\n     * @param threads `true` if the runtime used has threads support\n     */\n    constructor(threads) {\n        if (threads) {\n            this.UTF8ViewToString = (s, e) => {\n                if (!s)\n                    return '';\n                return this._utf8Decoder.decode(this.HEAPU8.slice(s, e));\n            };\n        }\n        else {\n            this.UTF8ViewToString = (s, e) => {\n                if (!s)\n                    return '';\n                return this._utf8Decoder.decode(this.HEAPU8.subarray(s, e));\n            };\n        }\n        this._brokenComponentIndex = this._registerComponent(BrokenComponent);\n    }\n    /**\n     * Reset the cache of the library.\n     *\n     * @note Should only be called when tearing down the runtime.\n     */\n    reset() {\n        /* Called first to perform cleanup. */\n        this._wl_reset();\n        this._components = null;\n        this._images.length = 1;\n        this.allocateTempMemory(1024);\n        this._componentTypes = [];\n        this._componentTypeIndices = {};\n        this._brokenComponentIndex = this._registerComponent(BrokenComponent);\n    }\n    /**\n     * Checks whether the given component is registered or not.\n     *\n     * @param ctor  A string representing the component typename (e.g., `'cursor-component'`).\n     * @returns `true` if the component is registered, `false` otherwise.\n     */\n    isRegistered(type) {\n        return type in this._componentTypeIndices;\n    }\n    /**\n     * Register a legacy component in this Emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param typeName The name of the component.\n     * @param params An object containing the parameters (properties).\n     * @param object The object's prototype.\n     * @returns The registration index\n     */\n    _registerComponentLegacy(typeName, params, object) {\n        const ctor = class CustomComponent extends Component {\n        };\n        ctor.TypeName = typeName;\n        ctor.Properties = params;\n        Object.assign(ctor.prototype, object);\n        return this._registerComponent(ctor);\n    }\n    /**\n     * Register a class component in this Emscripten instance.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param ctor The class to register.\n     * @returns The registration index.\n     */\n    _registerComponent(ctor) {\n        if (!ctor.TypeName)\n            throw new Error('no name provided for component.');\n        if (!ctor.prototype._triggerInit) {\n            throw new Error(`registerComponent(): Component ${ctor.TypeName} must extend Component`);\n        }\n        inheritProperties(ctor);\n        _setupDefaults(ctor);\n        _setPropertyOrder(ctor);\n        const typeIndex = ctor.TypeName in this._componentTypeIndices\n            ? this._componentTypeIndices[ctor.TypeName]\n            : this._componentTypes.length;\n        this._componentTypes[typeIndex] = ctor;\n        this._componentTypeIndices[ctor.TypeName] = typeIndex;\n        if (ctor === BrokenComponent)\n            return typeIndex;\n        this._log.info(LogTag.Engine, 'Registered component', ctor.TypeName, `(class ${ctor.name})`, 'with index', typeIndex);\n        if (ctor.onRegister)\n            ctor.onRegister(this._engine);\n        return typeIndex;\n    }\n    /**\n     * Allocate the requested amount of temporary memory\n     * in this WASM instance.\n     *\n     * @param size The number of bytes to allocate\n     */\n    allocateTempMemory(size) {\n        this._log.info(LogTag.Engine, 'Allocating temp mem:', size);\n        this._tempMemSize = size;\n        if (this._tempMem)\n            this._free(this._tempMem);\n        this._tempMem = this._malloc(this._tempMemSize);\n        this.updateTempMemory();\n    }\n    /**\n     * @todo: Delete this and only keep `allocateTempMemory`\n     *\n     * @param size Number of bytes to allocate\n     */\n    requireTempMem(size) {\n        if (this._tempMemSize >= size)\n            return;\n        /* Grow in 1kb increments */\n        this.allocateTempMemory(Math.ceil(size / 1024) * 1024);\n    }\n    /**\n     * Update the temporary memory views. This must be called whenever the\n     * temporary memory address changes.\n     *\n     * @note This api is meant to be used internally.\n     */\n    updateTempMemory() {\n        this._tempMemFloat = new Float32Array(this.HEAP8.buffer, this._tempMem, this._tempMemSize >> 2);\n        this._tempMemInt = new Int32Array(this.HEAP8.buffer, this._tempMem, this._tempMemSize >> 2);\n        this._tempMemUint32 = new Uint32Array(this.HEAP8.buffer, this._tempMem, this._tempMemSize >> 2);\n        this._tempMemUint16 = new Uint16Array(this.HEAP8.buffer, this._tempMem, this._tempMemSize >> 1);\n        this._tempMemUint8 = new Uint8Array(this.HEAP8.buffer, this._tempMem, this._tempMemSize);\n    }\n    /**\n     * Returns a uint8 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU8(count) {\n        this.requireTempMem(count);\n        return this._tempMemUint8;\n    }\n    /**\n     * Returns a uint16 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required\n     * @returns A {@link TypedArray} over the WASM memory\n     */\n    getTempBufferU16(count) {\n        this.requireTempMem(count * 2);\n        return this._tempMemUint16;\n    }\n    /**\n     * Returns a uint32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferU32(count) {\n        this.requireTempMem(count * 4);\n        return this._tempMemUint32;\n    }\n    /**\n     * Returns a int32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferI32(count) {\n        this.requireTempMem(count * 4);\n        return this._tempMemInt;\n    }\n    /**\n     * Returns a float32 buffer view on temporary WASM memory.\n     *\n     * **Note**: this method might allocate if the requested memory is bigger\n     * than the current temporary memory allocated.\n     *\n     * @param count The number of **elements** required.\n     * @returns A {@link TypedArray} over the WASM memory.\n     */\n    getTempBufferF32(count) {\n        this.requireTempMem(count * 4);\n        return this._tempMemFloat;\n    }\n    /**\n     * Copy the string into temporary WASM memory and retrieve the pointer.\n     *\n     * @note This method will compute the strlen and append a `\\0`.\n     *\n     * @note The result should be used **directly** otherwise it might get\n     * overridden by any next call modifying the temporary memory.\n     *\n     * @param str The string to write to temporary memory\n     * @param byteOffset The starting byte offset in the temporary memory at which\n     *     the string should be written. This is useful when using multiple temporaries.\n     * @return The temporary pointer onto the WASM memory\n     */\n    tempUTF8(str, byteOffset = 0) {\n        const strLen = this.lengthBytesUTF8(str) + 1;\n        this.requireTempMem(strLen + byteOffset);\n        const ptr = this._tempMem + byteOffset;\n        this.stringToUTF8(str, ptr, strLen);\n        return ptr;\n    }\n    /**\n     * Copy the buffer into the WASM heap.\n     *\n     * @note The returned pointer must be freed.\n     *\n     * @param buffer The buffer to copy into the heap.\n     * @returns An allocated pointer, that must be free after use.\n     */\n    copyBufferToHeap(buffer) {\n        const size = buffer.byteLength;\n        const ptr = this._malloc(size);\n        this.HEAPU8.set(new Uint8Array(buffer), ptr);\n        return ptr;\n    }\n    /**\n     * Returns `true` if the runtime supports physx or not.\n     */\n    get withPhysX() {\n        return this._withPhysX;\n    }\n    /**\n     * Set the engine instance holding this bridge.\n     *\n     * @note This api is meant to be used internally.\n     *\n     * @param engine The engine instance.\n     */\n    _setEngine(engine) {\n        this._engine = engine;\n    }\n    /* WebAssembly to JS call bridge. */\n    _wljs_xr_session_start(mode) {\n        if (this._engine.xr === null) {\n            this._engine.xr = new XR(this, mode);\n            this._engine.onXRSessionStart.notify(this.webxr_session, mode);\n        }\n    }\n    _wljs_xr_session_end() {\n        const startEmitter = this._engine.onXRSessionStart;\n        if (startEmitter instanceof RetainEmitter)\n            startEmitter.reset();\n        this._engine.onXRSessionEnd.notify();\n        this._engine.xr = null;\n    }\n    _wljs_xr_disable() {\n        /* @todo This could directly be fully handled in JS. */\n        this._engine.arSupported = false;\n        this._engine.vrSupported = false;\n    }\n    _wljs_init(withPhysX) {\n        this._withPhysX = withPhysX;\n        /* Target memory for JS API functions that return arrays */\n        this.allocateTempMemory(1024);\n    }\n    _wljs_scene_switch(index) {\n        const scene = this._engine._scenes[index];\n        /* Scene can be null during testing with `engine.reset()` */\n        this._components = scene?._jsComponents ?? null;\n    }\n    _wljs_destroy_image(index) {\n        const img = this._images[index];\n        if (!img)\n            return;\n        this._images[index] = null;\n        if (img.src !== undefined) {\n            img.src = '';\n        }\n        if (img.onload !== undefined) {\n            img.onload = null;\n        }\n        if (img.onerror !== undefined) {\n            img.onerror = null;\n        }\n    }\n    _wljs_objects_markDestroyed(sceneIndex, idsPtr, count) {\n        const scene = this._engine._scenes[sceneIndex];\n        const start = idsPtr >>> 1;\n        for (let i = 0; i < count; ++i) {\n            const id = this.HEAPU16[start + i];\n            scene._destroyObject(id);\n        }\n    }\n    _wljs_scene_initialize(sceneIndex, idsPtr, idsEnd, paramDataPtr, paramDataEndPtr, offsetsPtr, offsetsEndPtr) {\n        const cbor = this.HEAPU8.subarray(paramDataPtr, paramDataEndPtr);\n        const offsets = this.HEAPU32.subarray(offsetsPtr >>> 2, offsetsEndPtr >>> 2);\n        const ids = this.HEAPU16.subarray(idsPtr >>> 1, idsEnd >>> 1);\n        const engine = this._engine;\n        const scene = engine._scenes[sceneIndex];\n        const components = scene._jsComponents;\n        let decoded;\n        try {\n            decoded = CBOR.decode(cbor);\n        }\n        catch (e) {\n            this._log.error(LogTag.Engine, 'Exception during component parameter decoding');\n            this._log.error(LogTag.Component, e);\n            return;\n        }\n        if (!Array.isArray(decoded)) {\n            this._log.error(LogTag.Engine, 'Parameter data must be an array');\n            return;\n        }\n        if (decoded.length !== ids.length) {\n            this._log.error(LogTag.Engine, `Parameter data has size ${decoded.length} but expected ${ids.length}`);\n            return;\n        }\n        for (let i = 0; i < decoded.length; ++i) {\n            const id = Component._pack(sceneIndex, ids[i]);\n            const index = this._wl_get_js_component_index_for_id(id);\n            const component = components[index];\n            const ctor = component.constructor;\n            if (ctor == BrokenComponent)\n                continue;\n            const paramNames = ctor._propertyOrder;\n            const paramValues = decoded[i];\n            if (!Array.isArray(paramValues)) {\n                this._log.error(LogTag.Engine, 'Component parameter data must be an array');\n                continue;\n            }\n            if (paramValues.length !== paramNames.length) {\n                this._log.error(LogTag.Engine, `Component parameter data has size ${paramValues.length} but expected ${paramNames.length}`);\n                continue;\n            }\n            for (let j = 0; j < paramValues.length; ++j) {\n                const name = paramNames[j];\n                const property = ctor.Properties[name];\n                const type = property.type;\n                let value = paramValues[j];\n                /* Default values are sent as undefined to avoid wasting space */\n                if (value === undefined) {\n                    const cloner = property.cloner ?? defaultPropertyCloner;\n                    value = cloner.clone(type, property.default);\n                    component[name] = value;\n                    continue;\n                }\n                /* This skips unset resource parameters as those are sent\n                 * directly with type null. Offsets for Int and Float types\n                 * should always be 0. */\n                /** @todo CBOR tag to mark resources? Wastes a byte though. */\n                if (typeof value === 'number') {\n                    value += offsets[type];\n                }\n                switch (type) {\n                    case Type.Bool:\n                    case Type.Int:\n                    case Type.Float:\n                    case Type.String:\n                    case Type.Enum:\n                    case Type.Vector2:\n                    case Type.Vector3:\n                    case Type.Vector4:\n                        /* Nothing to do */\n                        break;\n                    case Type.Object:\n                        value = value\n                            ? scene.wrap(this._wl_object_id(scene._index, value))\n                            : null;\n                        break;\n                    case Type.Mesh:\n                        value = engine.meshes.wrap(value);\n                        break;\n                    case Type.Texture:\n                        value = engine.textures.wrap(value);\n                        break;\n                    case Type.Material:\n                        value = engine.materials.wrap(value);\n                        break;\n                    case Type.Animation:\n                        value = scene.animations.wrap(value);\n                        break;\n                    case Type.Skin:\n                        value = scene.skins.wrap(value);\n                        break;\n                    case Type.Color:\n                        /* Colors are sent as Uint8Array. Normalize positive\n                         * integer values to 0-1. Don't assume any bit size\n                         * here, could become Uint16Array as well. */\n                        const max = (1 << (value.BYTES_PER_ELEMENT * 8)) - 1;\n                        value = Float32Array.from(value, (f, _) => f / max);\n                        break;\n                }\n                component[name] = value;\n            }\n        }\n    }\n    _wljs_set_component_param_translation(scene, component, param, valuePtr, valueEndPtr) {\n        const components = this._engine._scenes[scene]._jsComponents;\n        const comp = components[component];\n        const value = this.UTF8ViewToString(valuePtr, valueEndPtr);\n        const ctor = comp.constructor;\n        const paramName = ctor._propertyOrder[param];\n        comp[paramName] = value;\n    }\n    _wljs_get_component_type_index(namePtr, nameEndPtr) {\n        const typename = this.UTF8ViewToString(namePtr, nameEndPtr);\n        const index = this._componentTypeIndices[typename];\n        if (index === undefined) {\n            return this._brokenComponentIndex;\n        }\n        return index;\n    }\n    _wljs_component_create(sceneIndex, index, id, type, object) {\n        const scene = this._engine._scenes[sceneIndex];\n        scene._components.createJs(index, id, type, object);\n    }\n    _wljs_component_init(scene, component) {\n        const components = this._engine._scenes[scene]._jsComponents;\n        const c = components[component];\n        c._triggerInit();\n    }\n    _wljs_component_update(component, dt) {\n        const c = this._components[component];\n        c._triggerUpdate(dt);\n    }\n    _wljs_component_onActivate(component) {\n        const c = this._components[component];\n        c._triggerOnActivate();\n    }\n    _wljs_component_onDeactivate(component) {\n        const c = this._components[component];\n        c._triggerOnDeactivate();\n    }\n    _wljs_component_markDestroyed(sceneIndex, manager, componentId) {\n        const scene = this._engine._scenes[sceneIndex];\n        const component = scene._components.get(manager, componentId);\n        component?._triggerOnDestroy();\n    }\n    _wljs_swap(scene, a, b) {\n        const components = this._engine._scenes[scene]._jsComponents;\n        const componentA = components[a];\n        components[a] = components[b];\n        components[b] = componentA;\n    }\n    _wljs_copy(srcSceneIndex, srcIndex, dstSceneIndex, dstIndex, offsetsPtr) {\n        const srcScene = this._engine._scenes[srcSceneIndex];\n        const dstScene = this._engine._scenes[dstSceneIndex];\n        const destComp = dstScene._jsComponents[dstIndex];\n        const srcComp = srcScene._jsComponents[srcIndex];\n        try {\n            destComp._copy(srcComp, offsetsPtr);\n        }\n        catch (e) {\n            this._log.error(LogTag.Component, `Exception during ${destComp.type} copy() on object ${destComp.object.name}`);\n            this._log.error(LogTag.Component, e);\n        }\n    }\n    /**\n     * Forward an animation event to a corresponding\n     * {@link AnimationComponent}\n     *\n     * @note This api is meant to be used internally. Please have a look at\n     * {@link AnimationComponent.onEvent} instead.\n     *\n     * @param componentId Component id in the manager\n     * @param namePtr Pointer to UTF8 event name\n     * @param nameEndPtr Pointer to end of UTF8 event name\n     */\n    _wljs_trigger_animationEvent(componentId, namePtr, nameEndPtr) {\n        const scene = this._engine.scene;\n        const comp = scene._components.wrapAnimation(componentId);\n        const nameStr = this.UTF8ViewToString(namePtr, nameEndPtr);\n        comp.onEvent.notify(nameStr);\n    }\n}\n/*\n * Api <> Runtime compatibility.\n *\n * Some features exposed in the API are only available from a specific\n * runtime version.\n *\n * Every added feature must throw by default. If the runtime loaded\n * has the specific feature, the method will be overwritten by Emscripten\n * upon loading.\n */\n/**\n * Throwing function used for features added in a patch version.\n *\n * #### Usage\n *\n * ```ts\n * const requireRuntime1_1_1 = throwInvalidRuntime('1.1.1');\n * WASM.prototype._wl_new_function = requireRuntime1_1_1;\n * ```\n *\n * @param version The version in which the feature was added.\n * @returns A function that will throw when called.\n */\nfunction throwInvalidRuntime(version) {\n    return function () {\n        throw new Error(`Feature added in version ${version}.` +\n            `\\n\\t\u2192 Please use a Wonderland Engine editor version >= ${version}`);\n    };\n}\n", "/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};", "import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();", "import {Component, MeshComponent, Property} from '@wonderlandengine/api';\nimport { vec3 } from 'gl-matrix';\n\n/**\n * Randomize mesh and material on start.\n */\nexport class RandomMesh extends Component {\n    static TypeName = 'random-mesh';\n    /* Properties that are configurable in the editor */\n    static Properties = {\n        mesh0: Property.mesh(),\n        mesh1: Property.mesh(),\n        mesh2: Property.mesh(),\n        material0: Property.material(),\n        material1: Property.material(),\n        material2: Property.material(),\n    };\n\n    start() {\n        const mesh = this.object.getComponent(MeshComponent);\n        if (!mesh) {\n            throw new Error('mesh component is required');\n        }\n\n        const meshes = [this.mesh0, this.mesh1, this.mesh2];\n        const materials = [this.material0, this.material1, this.material2];\n        for (let i = 0; i < meshes.length; ++i) {\n            if (!meshes[i]) {\n                throw new Error(`Mesh ${i} is required`);\n            }\n            if (!materials[i]) {\n                throw new Error(`Material ${i} is required`);\n            }\n        }\n\n        const meshIndex = Math.floor(Math.random() * meshes.length);\n        const matIndex = Math.floor(Math.random() * materials.length);\n\n        mesh.mesh = meshes[meshIndex];\n        mesh.material = materials[matIndex];\n\n        /* Random scaling */\n        const scale = this.object.getScalingWorld();\n        const randScale = 0.5 + 0.5 * Math.random();\n        vec3.scale(scale, scale, randScale);\n        this.object.setScalingWorld(scale);\n\n        /* Update y position based on new scale */\n        this.object.setPositionLocal([0, 0.5 * scale[1], 0]);\n    }\n}\n", "import {Component, Property} from '@wonderlandengine/api';\n\nexport class RotateY extends Component {\n    static TypeName = 'rotate-y';\n    static Properties = {speed: Property.float(1.0)};\n\n    update(dt) {\n        this.object.rotateAxisAngleRadLocal([0, 1, 0], this.speed * dt);\n    }\n}\n", "/* wle:auto-imports:start */\nimport {RandomMesh} from './components/random-mesh.js';\nimport {RotateY} from './components/rotate-y.js';\n/* wle:auto-imports:end */\n\nexport default function(engine) {\n    /* wle:auto-register:start */\nengine.registerComponent(RandomMesh);\nengine.registerComponent(RotateY);\n/* wle:auto-register:end */\n}\n"],
  "mappings": "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",
  "names": ["Type", "TransactionType", "LogTag", "Collider", "Alignment", "VerticalAlignment", "TextEffect", "InputType", "LightType", "AnimationState", "ForceMode", "CollisionEventType", "Shape", "MeshAttribute", "property", "length", "angle", "LockAxis", "MeshIndexType", "MeshSkinningType", "MaterialParamType", "LogLevel", "scale", "len", "scale"]
}
